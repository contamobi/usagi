{
  "version": 3,
  "file": "nodeHttpExecutor.js",
  "sourceRoot": "",
  "sources": [
    "../src/nodeHttpExecutor.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { IncomingMessage, ClientRequest, Agent } from \"http\"\nimport * as https from \"https\"\nimport { ensureDir, readFile } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { homedir } from \"os\"\nimport { parse as parseIni } from \"ini\"\nimport { HttpExecutor, DownloadOptions, configureRequestOptions } from \"electron-builder-http\"\nimport { RequestOptions } from \"https\"\nimport { parse as parseUrl } from \"url\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\n\nexport class NodeHttpExecutor extends HttpExecutor<RequestOptions, ClientRequest> {\n  private httpsAgentPromise: Promise<Agent> | null\n\n  async download(url: string, destination: string, options?: DownloadOptions | null): Promise<string> {\n    if (options == null || !options.skipDirCreation) {\n      await ensureDir(path.dirname(destination))\n    }\n\n    if (this.httpsAgentPromise == null) {\n      this.httpsAgentPromise = createAgent()\n    }\n\n    const agent = await this.httpsAgentPromise\n    return await new BluebirdPromise<string>((resolve, reject) => {\n      const parsedUrl = parseUrl(url)\n      this.doDownload(configureRequestOptions({\n        hostname: parsedUrl.hostname,\n        path: parsedUrl.path,\n        headers: (options == null ? null : options.headers) || undefined,\n        agent: agent,\n      }), destination, 0, options || {cancellationToken: new CancellationToken()}, (error: Error) => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      })\n    })\n  }\n\n  doApiRequest<T>(options: RequestOptions, cancellationToken: CancellationToken, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, redirectCount: number = 0): Promise<T> {\n    if (this.debug.enabled) {\n      this.debug(`HTTPS request: ${JSON.stringify(options, null, 2)}`)\n    }\n\n    return cancellationToken.trackPromise(new BluebirdPromise<T>((resolve, reject, onCancel) => {\n      const request = https.request(options, (response: IncomingMessage) => {\n        try {\n          this.handleResponse(response, options, cancellationToken, resolve, reject, redirectCount, requestProcessor)\n        }\n        catch (e) {\n          reject(e)\n        }\n      })\n\n      this.addTimeOutHandler(request, reject)\n      request.on(\"error\", reject)\n      requestProcessor(request, reject)\n      onCancel!(() => request.abort())\n    }))\n  }\n\n  protected doRequest(options: any, callback: (response: any) => void): any {\n    return https.request(options, callback)\n  }\n}\n\nexport const httpExecutor: NodeHttpExecutor = new NodeHttpExecutor()\n\n// only https proxy\nasync function proxyFromNpm() {\n  let data = \"\"\n  try {\n    data = await readFile(path.join(homedir(), \".npmrc\"), \"utf-8\")\n  }\n  catch (ignored) {\n    return null\n  }\n\n  if (!data) {\n    return null\n  }\n\n  try {\n    const config = parseIni(data)\n    return config[\"https-proxy\"] || config.proxy\n  }\n  catch (e) {\n    // used in nsis auto-updater, do not use .util.warn here\n    console.warn(e)\n    return null\n  }\n}\n\n// only https url\nasync function createAgent() {\n  let proxyString: string =\n    process.env.npm_config_https_proxy ||\n    process.env.HTTPS_PROXY || process.env.https_proxy ||\n    process.env.npm_config_proxy\n\n  if (!proxyString) {\n    proxyString = await proxyFromNpm()\n    if (!proxyString) {\n      return null\n    }\n  }\n\n  const proxy = parseUrl(proxyString)\n\n  const proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\"\n  return require(\"tunnel-agent\")[`httpsOver${proxyProtocol}`]({\n    proxy: {\n      port: proxy.port || (proxyProtocol === \"Https\" ? 443 : 80),\n      host: proxy.hostname,\n      proxyAuth: proxy.auth\n    }\n  })\n}\n\n"
  ]
}
