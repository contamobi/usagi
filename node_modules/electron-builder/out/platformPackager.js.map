{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst-c\"\nimport { Arch, getArchSuffix, Platform, Target, TargetSpecificOptions } from \"electron-builder-core\"\nimport { asArray, debug, isEmptyOrSpaces, use } from \"electron-builder-util\"\nimport { deepAssign } from \"electron-builder-util/out/deepAssign\"\nimport { copyDir, statOrNull, unlinkIfExists } from \"electron-builder-util/out/fs\"\nimport { log, warn } from \"electron-builder-util/out/log\"\nimport { readdir, remove, rename } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { AppInfo } from \"./appInfo\"\nimport { checkFileInArchive, createAsarArchive } from \"./asarUtil\"\nimport { copyFiles, deprecatedUserIgnoreFilter, FileMatcher } from \"./fileMatcher\"\nimport { AsarOptions, Config, FileAssociation, FilePattern, Macros, PlatformSpecificBuildOptions } from \"./metadata\"\nimport { unpackElectron } from \"./packager/dirPackager\"\nimport { BuildInfo, PackagerOptions } from \"./packagerApi\"\nimport { readInstalled } from \"./readInstalled\"\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> {\n  readonly packagerOptions: PackagerOptions\n\n  readonly projectDir: string\n  readonly buildResourcesDir: string\n\n  readonly config: Config\n\n  readonly platformSpecificBuildOptions: DC\n\n  readonly resourceList: Promise<Array<string>>\n\n  abstract get platform(): Platform\n\n  readonly appInfo: AppInfo\n\n  constructor(readonly info: BuildInfo) {\n    this.config = info.config\n    this.platformSpecificBuildOptions = PlatformPackager.normalizePlatformSpecificBuildOptions((<any>this.config)[this.platform.buildConfigurationKey])\n    this.appInfo = this.prepareAppInfo(info.appInfo)\n    this.packagerOptions = info.options\n    this.projectDir = info.projectDir\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n\n    this.resourceList = readdir(this.buildResourcesDir)\n      .catch(e => {\n        if (e.code !== \"ENOENT\") {\n          throw e\n        }\n        return []\n      })\n  }\n\n  abstract get defaultTarget(): Array<string>\n\n  protected prepareAppInfo(appInfo: AppInfo) {\n    return appInfo\n  }\n\n  private static normalizePlatformSpecificBuildOptions(options: any | n): any {\n    return options == null ? Object.create(null) : options\n  }\n\n  abstract createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void\n\n  protected getCscPassword(): string {\n    const password = this.doGetCscPassword()\n    if (isEmptyOrSpaces(password)) {\n      log(\"CSC_KEY_PASSWORD is not defined, empty password will be used\")\n      return \"\"\n    }\n    else {\n      return password.trim()\n    }\n  }\n\n  protected doGetCscPassword() {\n    return this.packagerOptions.cscKeyPassword || process.env.CSC_KEY_PASSWORD\n  }\n\n  get relativeBuildResourcesDirname() {\n    return use(this.config.directories, it => it!.buildResources) || \"build\"\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return this.packagerOptions.prepackaged || path.join(outDir, `${this.platform.buildConfigurationKey}${getArchSuffix(arch)}${this.platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n  }\n\n  dispatchArtifactCreated(file: string, target: Target | null, safeArtifactName?: string) {\n    this.info.dispatchArtifactCreated({\n      file: file,\n      safeArtifactName: safeArtifactName,\n      packager: this,\n      target: target,\n    })\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    await this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions)\n    this.packageInDistributableFormat(appOutDir, arch, targets, postAsyncTasks)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): void {\n    postAsyncTasks.push(BluebirdPromise.map(targets, it => it.isAsyncSupported ? it.build(appOutDir, arch) : null)\n      .then(() => BluebirdPromise.each(targets, it => it.isAsyncSupported ? null : it.build(appOutDir, arch))))\n  }\n\n  private getExtraFileMatchers(isResources: boolean, appOutDir: string, fileMatchOptions: Macros, customBuildOptions: DC): Array<FileMatcher> | null {\n    const base = isResources ? this.getResourcesDir(appOutDir) : (this.platform === Platform.MAC ? path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\") : appOutDir)\n    return this.getFileMatchers(isResources ? \"extraResources\" : \"extraFiles\", this.projectDir, base, true, fileMatchOptions, customBuildOptions)\n  }\n\n  protected async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, platformSpecificBuildOptions: DC) {\n    if (this.info.options.prepackaged != null) {\n      return\n    }\n\n    const asarOptions = await this.computeAsarOptions(platformSpecificBuildOptions)\n    const fileMatchOptions: Macros = {\n      arch: Arch[arch],\n      os: this.platform.buildConfigurationKey\n    }\n\n    const extraResourceMatchers = this.getExtraFileMatchers(true, appOutDir, fileMatchOptions, platformSpecificBuildOptions)\n    const extraFileMatchers = this.getExtraFileMatchers(false, appOutDir, fileMatchOptions, platformSpecificBuildOptions)\n\n    const resourcesPath = this.platform === Platform.MAC ? path.join(appOutDir, \"Electron.app\", \"Contents\", \"Resources\") : path.join(appOutDir, \"resources\")\n\n    log(`Packaging for ${platformName} ${Arch[arch]} using electron ${this.info.electronVersion} to ${path.relative(this.projectDir, appOutDir)}`)\n\n    const appDir = this.info.appDir\n    const ignoreFiles = new Set([path.resolve(this.info.projectDir, outDir),\n      path.resolve(this.info.projectDir, this.buildResourcesDir),\n      path.resolve(this.info.projectDir, \"electron-builder.yml\"),\n      path.resolve(this.info.projectDir, \"electron-builder.json\"),\n      path.resolve(this.info.projectDir, \"electron-builder.json5\")])\n    if (this.info.isPrepackedAppAsar) {\n      await unpackElectron(this, appOutDir, platformName, Arch[arch], this.info.electronVersion)\n    }\n    else {\n      // prune dev or not listed dependencies\n      await BluebirdPromise.all([\n        dependencies(appDir, ignoreFiles),\n        unpackElectron(this, appOutDir, platformName, Arch[arch], this.info.electronVersion),\n      ])\n\n      if (debug.enabled) {\n        const nodeModulesDir = path.join(appDir, \"node_modules\")\n        debug(`Dev or extraneous dependencies: ${Array.from(ignoreFiles).slice(2).map(it => path.relative(nodeModulesDir, it)).join(\", \")}`)\n      }\n    }\n\n    const patterns = this.info.isPrepackedAppAsar ? null : this.getFileMatchers(\"files\", appDir, path.join(resourcesPath, \"app\"), false, fileMatchOptions, platformSpecificBuildOptions)\n    const defaultMatcher = patterns == null ? new FileMatcher(appDir, path.join(resourcesPath, \"app\"), fileMatchOptions) : patterns[0]\n    if (defaultMatcher.isEmpty() || defaultMatcher.containsOnlyIgnore()) {\n      defaultMatcher.addAllPattern()\n    }\n    else {\n      defaultMatcher.addPattern(\"package.json\")\n    }\n    defaultMatcher.addPattern(\"!**/node_modules/*/{CHANGELOG.md,ChangeLog,changelog.md,README.md,README,readme.md,readme,test,__tests__,tests,powered-test,example,examples,*.d.ts}\")\n    defaultMatcher.addPattern(\"!**/node_modules/.bin\")\n    defaultMatcher.addPattern(\"!**/*.{o,hprof,orig,pyc,pyo,rbc,swp}\")\n    defaultMatcher.addPattern(\"!**/._*\")\n    defaultMatcher.addPattern(\"!*.iml\")\n    //noinspection SpellCheckingInspection\n    defaultMatcher.addPattern(\"!**/{.git,.hg,.svn,CVS,RCS,SCCS,\" +\n      \"__pycache__,.DS_Store,thumbs.db,.gitignore,.gitattributes,\" +\n      \".editorconfig,.flowconfig,.jshintrc,\" +\n      \".yarn-integrity,.yarn-metadata.json,yarn-error.log,yarn.lock,npm-debug.log,\" +\n      \".idea,\" +\n      \"appveyor.yml,.travis.yml,circle.yml,\" +\n      \".nyc_output}\")\n\n    let rawFilter: any = null\n    const deprecatedIgnore = (<any>this.config).ignore\n    if (deprecatedIgnore != null) {\n      if (typeof deprecatedIgnore === \"function\") {\n        warn(`\"ignore\" is specified as function, may be new \"files\" option will be suit your needs? Please see https://github.com/electron-userland/electron-builder/wiki/Options#Config-files`)\n      }\n      else {\n        warn(`\"ignore\" is deprecated, please use \"files\", see https://github.com/electron-userland/electron-builder/wiki/Options#Config-files`)\n      }\n      rawFilter = deprecatedUserIgnoreFilter(deprecatedIgnore, appDir)\n    }\n\n    const excludePatterns: Array<Minimatch> = []\n    if (extraResourceMatchers != null) {\n      for (const matcher of extraResourceMatchers) {\n        matcher.computeParsedPatterns(excludePatterns, this.info.projectDir)\n      }\n    }\n    if (extraFileMatchers != null) {\n      for (const matcher of extraFileMatchers) {\n        matcher.computeParsedPatterns(excludePatterns, this.info.projectDir)\n      }\n    }\n\n    const filter = defaultMatcher.createFilter(ignoreFiles, rawFilter, excludePatterns.length > 0 ? excludePatterns : null)\n    let promise\n    if (this.info.isPrepackedAppAsar) {\n      promise = copyDir(appDir, path.join(resourcesPath), filter)\n    }\n    else if (asarOptions == null) {\n      promise = copyDir(appDir, path.join(resourcesPath, \"app\"), filter)\n    }\n    else {\n      const unpackPattern = this.getFileMatchers(\"asarUnpack\", appDir, path.join(resourcesPath, \"app\"), false, fileMatchOptions, platformSpecificBuildOptions)\n      const fileMatcher = unpackPattern == null ? null : unpackPattern[0]\n      promise = createAsarArchive(appDir, resourcesPath, asarOptions, filter, fileMatcher == null ? null : fileMatcher.createFilter())\n    }\n\n    //noinspection ES6MissingAwait\n    const promises = [promise, unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")), unlinkIfExists(path.join(appOutDir, \"version\")), this.postInitApp(appOutDir)]\n    if (this.platform !== Platform.MAC) {\n      promises.push(rename(path.join(appOutDir, \"LICENSE\"), path.join(appOutDir, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}))\n    }\n    if (this.info.electronVersion != null && this.info.electronVersion[0] === \"0\") {\n      // electron release >= 0.37.4 - the default_app/ folder is a default_app.asar file\n      promises.push(remove(path.join(resourcesPath, \"default_app\")))\n    }\n\n    await BluebirdPromise.all(promises)\n\n    if (platformName === \"darwin\" || platformName === \"mas\") {\n      await (<any>require(\"./packager/mac\")).createApp(this, appOutDir)\n    }\n\n    await copyFiles(extraResourceMatchers)\n    await copyFiles(extraFileMatchers)\n\n    await this.info.afterPack({\n      appOutDir: appOutDir,\n      packager: this,\n      electronPlatformName: platformName,\n      arch: arch,\n    })\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\n  }\n\n  protected async postInitApp(executableFile: string): Promise<any> {\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return null\n  }\n\n  private async computeAsarOptions(customBuildOptions: DC): Promise<AsarOptions | null> {\n    function errorMessage(name: string) {\n      return `${name} is deprecated is deprecated and not supported — please use asarUnpack`\n    }\n\n    const buildMetadata = <any>this.config\n    if (buildMetadata[\"asar-unpack\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack\"))\n    }\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack-dir\"))\n    }\n\n    const platformSpecific = customBuildOptions.asar\n    const result = platformSpecific == null ? this.config.asar : platformSpecific\n    if (result === false) {\n      const appAsarStat = await statOrNull(path.join(this.info.appDir, \"app.asar\"))\n      //noinspection ES6MissingAwait\n      if (appAsarStat == null || !appAsarStat.isFile()) {\n        warn(\"Packaging using asar archive is disabled — it is strongly not recommended.\\n\" +\n          \"Please enable asar and use asarUnpack to unpack files that must be externally available.\")\n      }\n      return null\n    }\n\n    const defaultOptions = {\n      extraMetadata: this.packagerOptions.extraMetadata,\n    }\n\n    if (result == null || result === true) {\n      return defaultOptions\n    }\n\n    for (const name of [\"unpackDir\", \"unpack\"]) {\n      if ((<any>result)[name] != null) {\n        throw new Error(errorMessage(`asar.${name}`))\n      }\n    }\n    return deepAssign({}, result, defaultOptions)\n  }\n\n  private getFileMatchers(name: \"files\" | \"extraFiles\" | \"extraResources\" | \"asarUnpack\", defaultSrc: string, defaultDest: string, allowAdvancedMatching: boolean, fileMatchOptions: Macros, customBuildOptions: DC): Array<FileMatcher> | null {\n    const globalPatterns: Array<string | FilePattern> | string | n | FilePattern = (<any>this.config)[name]\n    const platformSpecificPatterns: Array<string | FilePattern> | string | n = (<any>customBuildOptions)[name]\n\n    const defaultMatcher = new FileMatcher(defaultSrc, defaultDest, fileMatchOptions)\n    const fileMatchers: Array<FileMatcher> = []\n\n    function addPatterns(patterns: Array<string | FilePattern> | string | n | FilePattern) {\n      if (patterns == null) {\n        return\n      }\n      else if (!Array.isArray(patterns)) {\n        if (typeof patterns === \"string\") {\n          defaultMatcher.addPattern(patterns)\n          return\n        }\n        patterns = [patterns]\n      }\n\n      for (const pattern of patterns) {\n        if (typeof pattern === \"string\") {\n          // use normalize to transform ./foo to foo\n          defaultMatcher.addPattern(pattern)\n        }\n        else if (allowAdvancedMatching) {\n          const from = pattern.from == null ? defaultSrc : path.resolve(defaultSrc, pattern.from)\n          const to = pattern.to == null ? defaultDest : path.resolve(defaultDest, pattern.to)\n          fileMatchers.push(new FileMatcher(from, to, fileMatchOptions, pattern.filter))\n        }\n        else {\n          throw new Error(`Advanced file copying not supported for \"${name}\"`)\n        }\n      }\n    }\n\n    addPatterns(globalPatterns)\n    addPatterns(platformSpecificPatterns)\n\n    if (!defaultMatcher.isEmpty()) {\n      // default matcher should be first in the array\n      fileMatchers.unshift(defaultMatcher)\n    }\n\n    return fileMatchers.length === 0 ? null : fileMatchers\n  }\n\n  public getResourcesDir(appOutDir: string): string {\n    return this.platform === Platform.MAC ? this.getMacOsResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\n  }\n\n  public getMacOsResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\", \"Resources\")\n  }\n\n  private async checkFileInPackage(resourcesDir: string, file: string, messagePrefix: string, isAsar: boolean) {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\n    if (isAsar) {\n      await checkFileInArchive(path.join(resourcesDir, \"app.asar\"), relativeFile, messagePrefix)\n      return\n    }\n\n    const pathParsed = path.parse(file)\n    // Even when packaging to asar is disabled, it does not imply that the main file can not be inside an .asar archive.\n    // This may occur when the packaging is done manually before processing with electron-builder.\n    if (pathParsed.dir.includes(\".asar\")) {\n      // The path needs to be split to the part with an asar archive which acts like a directory and the part with\n      // the path to main file itself. (e.g. path/arch.asar/dir/index.js -> path/arch.asar, dir/index.js)\n      const pathSplit: Array<string> = pathParsed.dir.split(path.sep)\n      let partWithAsarIndex = 0\n      pathSplit.some((pathPart: string, index: number) => {\n        partWithAsarIndex = index\n        return pathPart.endsWith(\".asar\")\n      })\n      const asarPath = path.join.apply(path, pathSplit.slice(0, partWithAsarIndex + 1))\n      let mainPath = pathSplit.length > (partWithAsarIndex + 1) ? path.join.apply(pathSplit.slice(partWithAsarIndex + 1)) : \"\"\n      mainPath += path.join(mainPath, pathParsed.base)\n      await checkFileInArchive(path.join(resourcesDir, \"app\", asarPath), mainPath, messagePrefix)\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      if (outStat == null) {\n        throw new Error(`${messagePrefix} \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\n      }\n      else {\n        //noinspection ES6MissingAwait\n        if (!outStat.isFile()) {\n          throw new Error(`${messagePrefix} \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\n        }\n      }\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\n    }\n    else {\n      //noinspection ES6MissingAwait\n      if (!outStat.isDirectory()) {\n        throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\n      }\n    }\n\n    const resourcesDir = this.getResourcesDir(appOutDir)\n    await this.checkFileInPackage(resourcesDir, this.appInfo.metadata.main || \"index.js\", \"Application entry file\", isAsar)\n    await this.checkFileInPackage(resourcesDir, \"package.json\", \"Application\", isAsar)\n  }\n\n  expandArtifactNamePattern(targetSpecificOptions: TargetSpecificOptions | n, ext: string, arch?: Arch | null, defaultPattern?: string): string {\n    let pattern = targetSpecificOptions == null ? null : targetSpecificOptions.artifactName\n    if (pattern == null) {\n      pattern = this.platformSpecificBuildOptions.artifactName || this.config.artifactName || defaultPattern || \"${productName}-${version}.${ext}\"\n    }\n\n    if (arch == null) {\n      pattern = pattern\n        .replace(\"-${arch}\", \"\")\n        .replace(\" ${arch}\", \"\")\n        .replace(\"_${arch}\", \"\")\n    }\n\n    const appInfo = this.appInfo\n    return pattern.replace(/\\$\\{([a-zA-Z]+)\\}/g, (match, p1): string => {\n      switch (p1) {\n        case \"name\":\n          return appInfo.name\n\n        case \"version\":\n          return appInfo.version\n\n        case \"productName\":\n          return appInfo.productFilename\n\n        case \"arch\":\n          if (arch == null) {\n            // see above, we remove macro if no arch\n            return \"\"\n          }\n          return Arch[arch]\n\n        case \"os\":\n          return this.platform.buildConfigurationKey\n\n        case \"ext\":\n          return ext\n\n        default:\n          throw new Error(`Macro ${p1} is not defined`)\n      }\n    })\n  }\n\n  generateName(ext: string | null, arch: Arch, deployment: boolean, classifier: string | null = null): string {\n    let c: string | null = null\n    let e: string | null = null\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\") {\n        c = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        c = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32 && ext === \"deb\") {\n      c = \"i386\"\n    }\n    else if (ext === \"pacman\") {\n      if (arch === Arch.ia32) {\n        c = \"i686\"\n      }\n      e = \"pkg.tar.xz\"\n    }\n    else {\n      c = Arch[arch]\n    }\n\n    if (c == null) {\n      c = classifier\n    }\n    else if (classifier != null) {\n      c += `-${classifier}`\n    }\n    if (e == null) {\n      e = ext\n    }\n    return this.generateName2(e, c, deployment)\n  }\n\n  generateName2(ext: string | null, classifier: string | n, deployment: boolean): string {\n    const dotExt = ext == null ? \"\" : `.${ext}`\n    const separator = ext === \"deb\" ? \"_\" : \"-\"\n    return `${deployment ? this.appInfo.name : this.appInfo.productFilename}${separator}${this.appInfo.version}${classifier == null ? \"\" : `${separator}${classifier}`}${dotExt}`\n  }\n\n  async getDefaultIcon(ext: string) {\n    const resourceList = await this.resourceList\n    const name = `icon.${ext}`\n    if (resourceList.includes(name)) {\n      return path.join(this.buildResourcesDir, name)\n    }\n    else {\n      warn(\"Application icon is not set, default Electron icon will be used\")\n      return null\n    }\n  }\n\n  getTempFile(suffix: string): Promise<string> {\n    return this.info.tempDirManager.getTempFile(suffix)\n  }\n\n  get fileAssociations(): Array<FileAssociation> {\n    return asArray(this.config.fileAssociations).concat(asArray(this.platformSpecificBuildOptions.fileAssociations))\n  }\n\n  async getResource(custom: string | n, ...names: Array<string>): Promise<string | null> {\n    if (custom === undefined) {\n      const resourceList = await this.resourceList\n      for (const name of names) {\n        if (resourceList.includes(name)) {\n          return path.join(this.buildResourcesDir, name)\n        }\n      }\n    }\n    else if (!isEmptyOrSpaces(custom)) {\n      let p = path.resolve(this.buildResourcesDir, custom)\n      if (await statOrNull(p) == null) {\n        p = path.resolve(this.projectDir, custom)\n        if (await statOrNull(p) == null) {\n          throw new Error(`Cannot find specified resource \"${custom}\", nor relative to \"${this.buildResourcesDir}\", neither relative to project dir (\"${this.projectDir}\")`)\n        }\n      }\n      return p\n    }\n    return null\n  }\n\n  get forceCodeSigning(): boolean {\n    const forceCodeSigningPlatform = this.platformSpecificBuildOptions.forceCodeSigning\n    return (forceCodeSigningPlatform == null ? this.config.forceCodeSigning : forceCodeSigningPlatform) || false\n  }\n}\n\n// remove leading dot\nexport function normalizeExt(ext: string) {\n  return ext.startsWith(\".\") ? ext.substring(1) : ext\n}\n\nasync function dependencies(dir: string, result: Set<string>): Promise<void> {\n  const pathToDep = await readInstalled(dir)\n  for (const dep of pathToDep.values()) {\n    if (dep.extraneous) {\n      result.add(dep.path)\n    }\n  }\n}\n"
  ]
}
