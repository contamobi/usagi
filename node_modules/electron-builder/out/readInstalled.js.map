{
  "version": 3,
  "file": "readInstalled.js",
  "sourceRoot": "",
  "sources": [
    "../src/readInstalled.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { readJson, lstat, realpath, readdir } from \"fs-extra-p\"\n\nexport interface Dependency {\n  name: string\n  path: string\n  extraneous: boolean\n  optional: boolean\n\n  dependencies: { [name: string]: Dependency }\n}\n\nexport async function readInstalled(folder: string): Promise<Map<string, Dependency>> {\n  const opts = {\n    depth: Infinity,\n    dev: false,\n  }\n\n  const findUnmetSeen = new Set<any>()\n  const pathToDep = new Map<string, Dependency>()\n  const obj = await _readInstalled(folder, null, null, 0, opts, pathToDep, findUnmetSeen)\n\n  unmarkExtraneous(obj, opts.dev, true)\n  return pathToDep\n}\n\nasync function _readInstalled(folder: string, parent: any | null, name: string | null, depth: number, opts: any, realpathSeen: Map<string, Dependency>, findUnmetSeen: Set<any>): Promise<any> {\n  const realDir = await realpath(folder)\n\n  const processed = realpathSeen.get(realDir)\n  if (processed != null) {\n    return processed\n  }\n\n  const obj = await readJson(path.resolve(folder, \"package.json\"))\n  obj.realPath = realDir\n  obj.path = obj.path || folder\n  //noinspection ES6MissingAwait\n  if ((await lstat(folder)).isSymbolicLink()) {\n    obj.link = realDir\n  }\n\n  obj.realName = name || obj.name\n  obj.dependencyNames = obj.dependencies == null ? null : new Set(Object.keys(obj.dependencies))\n\n  // Mark as extraneous at this point.\n  // This will be un-marked in unmarkExtraneous, where we mark as not-extraneous everything that is required in some way from the root object.\n  obj.extraneous = true\n  obj.optional = true\n\n  if (parent != null && obj.link == null) {\n    obj.parent = parent\n  }\n\n  realpathSeen.set(realDir, obj)\n\n  if (depth > opts.depth) {\n    return obj\n  }\n\n  const deps = await BluebirdPromise.map(await readScopedDir(path.join(folder, \"node_modules\")), pkg => _readInstalled(path.join(folder, \"node_modules\", pkg), obj, pkg, depth + 1, opts, realpathSeen, findUnmetSeen), {concurrency: 8})\n  if (obj.dependencies != null) {\n    for (const dep of deps) {\n      obj.dependencies[dep.realName] = dep\n    }\n\n    // any strings in the obj.dependencies are unmet deps. However, if it's optional, then that's fine, so just delete it.\n    if (obj.optionalDependencies != null) {\n      for (const dep of Object.keys(obj.optionalDependencies)) {\n        if (typeof obj.dependencies[dep] === \"string\") {\n          delete obj.dependencies[dep]\n        }\n      }\n    }\n  }\n\n  return obj\n}\n\nfunction unmark(deps: Iterable<string>, obj: any, dev: boolean, unsetOptional: boolean) {\n  for (const name of deps) {\n    const dep = findDep(obj, name)\n    if (dep != null) {\n      if (unsetOptional) {\n        dep.optional = false\n      }\n      if (dep.extraneous) {\n        unmarkExtraneous(dep, dev, false)\n      }\n    }\n  }\n}\n\nfunction unmarkExtraneous(obj: any, dev: boolean, isRoot: boolean) {\n  // Mark all non-required deps as extraneous.\n  // start from the root object and mark as non-extraneous all modules\n  // that haven't been previously flagged as extraneous then propagate to all their dependencies\n\n  obj.extraneous = false\n\n  if (obj.dependencyNames != null) {\n    unmark(obj.dependencyNames, obj, dev, true)\n  }\n\n  if (dev && obj.devDependencies != null && (isRoot || obj.link)) {\n    unmark(Object.keys(obj.devDependencies), obj, dev, true)\n  }\n\n  if (obj.peerDependencies != null) {\n    unmark(Object.keys(obj.peerDependencies), obj, dev, true)\n  }\n\n  if (obj.optionalDependencies != null) {\n    unmark(Object.keys(obj.optionalDependencies), obj, dev, false)\n  }\n}\n\n// find the one that will actually be loaded by require() so we can make sure it's valid\nfunction findDep(obj: any, name: string) {\n  let r = obj\n  let found = null\n  while (r != null && found == null) {\n    // if r is a valid choice, then use that.\n    // kinda weird if a pkg depends on itself, but after the first iteration of this loop, it indicates a dep cycle.\n    const dependency = r.dependencies == null ? null : r.dependencies[name]\n    if (typeof dependency === \"object\") {\n      found = dependency\n    }\n    if (found == null && r.realName === name) {\n      found = r\n    }\n    r = r.link ? null : r.parent\n  }\n  return found\n}\n\nasync function readScopedDir(dir: string) {\n  let files: Array<string>\n  try {\n    files = (await readdir(dir)).filter(it => !it.startsWith(\".\"))\n  }\n  catch (e) {\n    // error indicates that nothing is installed here\n    return []\n  }\n\n  files.sort()\n\n  const scopes = files.filter(it => it.startsWith(\"@\"))\n  if (scopes.length === 0) {\n    return files\n  }\n\n  const result = files.filter(it => !it.startsWith(\"@\"))\n  const scopeFileList = await BluebirdPromise.map(scopes, it => readdir(path.join(dir, it)))\n  for (let i = 0; i < scopes.length; i++) {\n    for (const file of scopeFileList[i]) {\n      if (!file.startsWith(\".\")) {\n        result.push(`${scopes[i]}/${file}`)\n      }\n    }\n  }\n\n  result.sort()\n  return result\n}"
  ]
}
