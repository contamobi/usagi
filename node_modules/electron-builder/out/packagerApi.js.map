{
  "version": 3,
  "file": "packagerApi.js",
  "sourceRoot": "",
  "sources": [
    "../src/packagerApi.ts"
  ],
  "names": [],
  "mappings": "",
  "sourcesContent": [
    "import { Platform, Arch, Target } from \"electron-builder-core\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { Metadata, Config, AfterPackContext } from \"./metadata\"\nimport { PublishConfiguration } from \"electron-builder-http/out/publishOptions\"\nimport { TmpDir } from \"electron-builder-util/out/tmp\"\nimport { AppInfo } from \"./appInfo\"\n\nexport interface PackagerOptions {\n  targets?: Map<Platform, Map<Arch, string[]>>\n\n  projectDir?: string | null\n\n  cscLink?: string | null\n  cscKeyPassword?: string | null\n\n  cscInstallerLink?: string | null\n  cscInstallerKeyPassword?: string | null\n\n  platformPackagerFactory?: ((info: BuildInfo, platform: Platform, cleanupTasks: Array<() => Promise<any>>) => PlatformPackager<any>) | null\n\n  /**\n   * @deprecated Use {@link PackagerOptions#config} instead.\n   */\n  readonly devMetadata?: Metadata\n\n  readonly config?: Config | string | null\n\n  /**\n   * The same as [application package.json](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata).\n   *\n   * Application `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly appMetadata?: Metadata\n\n  readonly effectiveOptionComputed?: (options: any) => Promise<boolean>\n\n  readonly extraMetadata?: any\n\n  readonly prepackaged?: string\n}\n\nexport interface BuildInfo {\n  readonly options: PackagerOptions\n\n  readonly metadata: Metadata\n\n  readonly config: Config\n\n  readonly projectDir: string\n  readonly appDir: string\n\n  readonly electronVersion: string\n\n  readonly isTwoPackageJsonProjectLayoutUsed: boolean\n\n  readonly appInfo: AppInfo\n\n  readonly tempDirManager: TmpDir\n\n  readonly repositoryInfo: Promise<SourceRepositoryInfo | null>\n\n  readonly isPrepackedAppAsar: boolean\n\n  dispatchArtifactCreated(event: ArtifactCreated): void\n\n  afterPack(context: AfterPackContext): Promise<void>\n}\n\nexport interface ArtifactCreated {\n  readonly packager: PlatformPackager<any>\n  readonly target: Target | null\n\n  readonly file?: string\n  readonly data?: Buffer\n\n  readonly safeArtifactName?: string\n\n  readonly publishConfig?: PublishConfiguration\n}\n\nexport interface SourceRepositoryInfo {\n  type: string\n  domain: string\n  user: string\n  project: string\n}"
  ]
}
