{
  "version": 3,
  "file": "fileMatcher.js",
  "sourceRoot": "",
  "sources": [
    "../src/fileMatcher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst-c\"\nimport { asArray } from \"electron-builder-util\"\nimport { copyDir, copyFile, Filter, statOrNull } from \"electron-builder-util/out/fs\"\nimport { warn } from \"electron-builder-util/out/log\"\nimport { mkdirs } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { Macros } from \"./metadata\"\nimport { createFilter, hasMagic } from \"./util/filter\"\n\nexport class FileMatcher {\n  readonly from: string\n  readonly to: string\n\n  readonly patterns: Array<string>\n\n  constructor(from: string, to: string, private options: Macros, patterns?: Array<string> | string | n) {\n    this.from = this.expandPattern(from)\n    this.to = this.expandPattern(to)\n    this.patterns = asArray(patterns).map(it => path.posix.normalize(it))\n  }\n\n  addPattern(pattern: string) {\n    this.patterns.push(path.posix.normalize((pattern)))\n  }\n\n  addAllPattern() {\n    // must be first, see minimatchAll implementation\n    this.patterns.unshift(\"**/*\")\n  }\n\n  isEmpty() {\n    return this.patterns.length === 0\n  }\n\n  containsOnlyIgnore(): boolean {\n    return !this.isEmpty() && this.patterns.find(it => !it.startsWith(\"!\")) == null\n  }\n\n  computeParsedPatterns(result: Array<Minimatch>, fromDir?: string): void {\n    // https://github.com/electron-userland/electron-builder/issues/733\n    const minimatchOptions = {dot: true}\n\n    const relativeFrom = fromDir == null ? null : path.relative(fromDir, this.from)\n\n    if (this.patterns.length === 0 && relativeFrom != null) {\n      // file mappings, from here is a file\n      result.push(new Minimatch(relativeFrom, minimatchOptions))\n      return\n    }\n\n    for (const p of this.patterns) {\n      let expandedPattern = this.expandPattern(p)\n      if (relativeFrom != null) {\n        expandedPattern = path.join(relativeFrom, expandedPattern)\n      }\n\n      const parsedPattern = new Minimatch(expandedPattern, minimatchOptions)\n      result.push(parsedPattern)\n\n      if (!hasMagic(parsedPattern)) {\n        // https://github.com/electron-userland/electron-builder/issues/545\n        // add **/*\n        result.push(new Minimatch(`${expandedPattern}/**/*`, minimatchOptions))\n      }\n    }\n  }\n\n  createFilter(ignoreFiles?: Set<string>, rawFilter?: (file: string) => boolean, excludePatterns?: Array<Minimatch> | n): Filter {\n    const parsedPatterns: Array<Minimatch> = []\n    this.computeParsedPatterns(parsedPatterns)\n    return createFilter(this.from, parsedPatterns, ignoreFiles, rawFilter, excludePatterns)\n  }\n\n  private expandPattern(pattern: string): string {\n    return pattern\n      .replace(/\\$\\{arch}/g, this.options.arch)\n      .replace(/\\$\\{os}/g, this.options.os)\n      .replace(/\\$\\{\\/\\*}/g, \"{,/**/*}\")\n  }\n}\n\nexport function copyFiles(patterns: Array<FileMatcher> | null): Promise<any> {\n  if (patterns == null || patterns.length === 0) {\n    return BluebirdPromise.resolve()\n  }\n\n  return BluebirdPromise.map(patterns, async pattern => {\n    const fromStat = await statOrNull(pattern.from)\n    if (fromStat == null) {\n      warn(`File source ${pattern.from} doesn't exist`)\n      return\n    }\n\n    if (fromStat.isFile()) {\n      const toStat = await statOrNull(pattern.to)\n      // https://github.com/electron-userland/electron-builder/issues/1245\n      if (toStat != null && toStat.isDirectory()) {\n        return await copyFile(pattern.from, path.join(pattern.to, path.basename(pattern.from)), fromStat)\n      }\n\n      await mkdirs(path.dirname(pattern.to))\n      return await copyFile(pattern.from, pattern.to, fromStat)\n    }\n\n    if (pattern.isEmpty() || pattern.containsOnlyIgnore()) {\n      pattern.addAllPattern()\n    }\n    return await copyDir(pattern.from, pattern.to, pattern.createFilter())\n  })\n}\n\n\nexport function deprecatedUserIgnoreFilter(ignore: Array<RegExp> | ((file: string) => boolean), appDir: string) {\n  let ignoreFunc: any\n  if (typeof ignore === \"function\") {\n    ignoreFunc = function (file: string) { return !(<any>ignore)(file) }\n  }\n  else {\n    if (!Array.isArray(ignore)) {\n      ignore = [ignore]\n    }\n\n    ignoreFunc = function (file: string) {\n      for (const i of <Array<RegExp>>ignore) {\n        if (file.match(i)) {\n          return false\n        }\n      }\n\n      return true\n    }\n  }\n\n  return function filter(file: string) {\n    let name = file.split(path.resolve(appDir))[1]\n    if (path.sep === \"\\\\\") {\n      // convert slashes so unix-format ignores work\n      name = name.replace(/\\\\/g, \"/\")\n    }\n    return ignoreFunc(name)\n  }\n}"
  ]
}
