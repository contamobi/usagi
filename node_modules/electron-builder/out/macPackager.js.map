{
  "version": 3,
  "file": "macPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/macPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { PlatformPackager } from \"./platformPackager\"\nimport { MasBuildOptions, MacOptions } from \"./options/macOptions\"\nimport * as path from \"path\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { warn, task } from \"electron-builder-util/out/log\"\nimport { createKeychain, CodeSigningInfo, findIdentity, appleCertificatePrefixes } from \"./codeSign\"\nimport { deepAssign } from \"electron-builder-util/out/deepAssign\"\nimport { signAsync, SignOptions } from \"electron-macos-sign\"\nimport { DmgTarget } from \"./targets/dmg\"\nimport { createCommonTarget, DIR_TARGET, NoOpTarget } from \"./targets/targetFactory\"\nimport { AppInfo } from \"./appInfo\"\nimport { PkgTarget, prepareProductBuildArgs } from \"./targets/pkg\"\nimport { exec } from \"electron-builder-util\"\nimport { Target, Platform, Arch } from \"electron-builder-core\"\nimport { BuildInfo } from \"./packagerApi\"\nimport { log } from \"electron-builder-util/out/log\"\n\nexport default class MacPackager extends PlatformPackager<MacOptions> {\n  readonly codeSigningInfo: Promise<CodeSigningInfo>\n\n  constructor(info: BuildInfo) {\n    super(info)\n\n    if (this.packagerOptions.cscLink == null || process.platform !== \"darwin\") {\n      this.codeSigningInfo = BluebirdPromise.resolve(Object.create(null))\n    }\n    else {\n      this.codeSigningInfo = createKeychain(info.tempDirManager, this.packagerOptions.cscLink!, this.getCscPassword(), this.packagerOptions.cscInstallerLink, this.packagerOptions.cscInstallerKeyPassword)\n    }\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"zip\", \"dmg\"]\n  }\n\n  protected prepareAppInfo(appInfo: AppInfo): AppInfo {\n    return new AppInfo(appInfo.metadata, this.info, this.platformSpecificBuildOptions.bundleVersion)\n  }\n\n  async getIconPath(): Promise<string | null> {\n    let iconPath = this.platformSpecificBuildOptions.icon || this.config.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.getDefaultIcon(\"icns\") : path.resolve(this.projectDir, iconPath)\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    for (const name of targets) {\n      switch (name) {\n        case DIR_TARGET:\n          break\n\n        case \"dmg\":\n          mapper(\"dmg\", outDir => new DmgTarget(this, outDir))\n          break\n\n        case \"pkg\":\n          mapper(\"pkg\", outDir => new PkgTarget(this, outDir))\n          break\n\n        default:\n          mapper(name, outDir => name === \"mas\" || name === \"mas-dev\" ? new NoOpTarget(name) : createCommonTarget(name, outDir, this))\n          break\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.MAC\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    let nonMasPromise: Promise<any> | null = null\n\n    const hasMas = targets.length !== 0 && targets.some(it => it.name === \"mas\" || it.name === \"mas-dev\")\n    const prepackaged = this.packagerOptions.prepackaged\n\n    if (prepackaged == null && (!hasMas || targets.length > 1)) {\n      const appOutDir = this.computeAppOutDir(outDir, arch)\n      nonMasPromise = this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions)\n        .then(() => this.sign(appOutDir, null))\n        .then(() => this.packageInDistributableFormat(appOutDir, Arch.x64, targets, postAsyncTasks))\n    }\n\n    for (const target of targets) {\n      const targetName = target.name\n      if (!(targetName === \"mas\" || targetName === \"mas-dev\")) {\n        continue\n      }\n\n      const appOutDir = prepackaged || path.join(outDir, targetName)\n      const masBuildOptions = deepAssign({}, this.platformSpecificBuildOptions, (<any>this.config).mas)\n      if (targetName === \"mas-dev\") {\n        deepAssign(masBuildOptions, (<any>this.config)[targetName])\n        masBuildOptions.type = \"development\"\n      }\n\n      if (prepackaged == null) {\n        await this.doPack(outDir, appOutDir, \"mas\", arch, masBuildOptions)\n      }\n      await this.sign(appOutDir, masBuildOptions)\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appOutDir: string, masOptions: MasBuildOptions | null): Promise<void> {\n    if (process.platform !== \"darwin\") {\n      warn(\"macOS application code signing is supported only on macOS, skipping.\")\n      return\n    }\n\n    const keychainName = (await this.codeSigningInfo).keychainName\n    const isMas = masOptions != null\n    const qualifier = this.platformSpecificBuildOptions.identity\n\n    if (!isMas && qualifier === null) {\n      if (this.forceCodeSigning) {\n        throw new Error(\"identity explicitly is set to null, but forceCodeSigning is set to true\")\n      }\n      log(\"identity explicitly is set to null, skipping macOS application code signing.\")\n      return\n    }\n\n    const masQualifier = isMas ? (masOptions!!.identity || qualifier) : null\n\n    const explicitType = masOptions == null ? this.platformSpecificBuildOptions.type : masOptions.type\n    const type = explicitType || \"distribution\"\n    const isDevelopment = type === \"development\"\n    let name = await findIdentity(isDevelopment ? \"Mac Developer\" : (isMas ? \"3rd Party Mac Developer Application\" : \"Developer ID Application\"), isMas ? masQualifier : qualifier, keychainName)\n    if (name == null) {\n      if (!isMas && !isDevelopment && explicitType !== \"distribution\") {\n        name = await findIdentity(\"Mac Developer\", qualifier, keychainName)\n        if (name != null) {\n          warn(\"Mac Developer is used to sign app — it is only for development and testing, not for production\")\n        }\n        else if (qualifier != null) {\n          throw new Error(`Identity name \"${qualifier}\" is specified, but no valid identity with this name in the keychain`)\n        }\n      }\n\n      if (name == null) {\n        const message = process.env.CSC_IDENTITY_AUTO_DISCOVERY === \"false\" ?\n          `App is not signed: env CSC_IDENTITY_AUTO_DISCOVERY is set to false` :\n          `App is not signed: cannot find valid ${isMas ? '\"3rd Party Mac Developer Application\" identity' : `\"Developer ID Application\" identity or custom non-Apple code signing certificate`}, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing`\n        if (isMas || this.forceCodeSigning) {\n          throw new Error(message)\n        }\n        else {\n          warn(message)\n          return\n        }\n      }\n    }\n\n    const appPath = path.join(appOutDir, `${this.appInfo.productFilename}.app`)\n    const signOptions: any = {\n      skipIdentityValidation: true,\n      identity: name!,\n      type: type,\n      platform: isMas ? \"mas\" : \"darwin\",\n      version: this.info.electronVersion,\n      app: appPath,\n      keychain: keychainName || undefined,\n      \"gatekeeper-assess\": appleCertificatePrefixes.find(it => name!.startsWith(it)) != null\n    }\n\n    const resourceList = await this.resourceList\n    if (resourceList.includes(`entitlements.osx.plist`)) {\n      throw new Error(\"entitlements.osx.plist is deprecated name, please use entitlements.mac.plist\")\n    }\n    if (resourceList.includes(`entitlements.osx.inherit.plist`)) {\n      throw new Error(\"entitlements.osx.inherit.plist is deprecated name, please use entitlements.mac.inherit.plist\")\n    }\n\n    const customSignOptions = masOptions || this.platformSpecificBuildOptions\n    if (customSignOptions.entitlements == null) {\n      const p = `entitlements.${isMas ? \"mas\" : \"mac\"}.plist`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n\n    if (customSignOptions.entitlementsInherit == null) {\n      const p = `entitlements.${isMas ? \"mas\" : \"mac\"}.inherit.plist`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n\n    await task(`Signing app (identity: ${name})`, this.doSign(signOptions))\n\n    if (masOptions != null) {\n      const pkg = path.join(appOutDir, `${this.appInfo.productFilename}-${this.appInfo.version}.pkg`)\n      const certType = \"3rd Party Mac Developer Installer\"\n      const masInstallerIdentity = await findIdentity(certType, masOptions.identity, keychainName)\n      if (masInstallerIdentity == null) {\n        throw new Error(`Cannot find valid \"${certType}\" identity to sign MAS installer, please see https://github.com/electron-userland/electron-builder/wiki/Code-Signing`)\n      }\n      await this.doFlat(appPath, pkg, masInstallerIdentity, keychainName)\n      this.dispatchArtifactCreated(pkg, null, `${this.appInfo.name}-${this.appInfo.version}.pkg`)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return signAsync(opts)\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doFlat(appPath: string, outFile: string, identity: string, keychain: string | n): Promise<any> {\n    const args = prepareProductBuildArgs(identity, keychain)\n    args.push(\"--component\", appPath, \"/Applications\")\n    args.push(outFile)\n    return exec(\"productbuild\", args)\n  }\n}"
  ]
}
