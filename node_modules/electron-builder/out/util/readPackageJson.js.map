{
  "version": 3,
  "file": "readPackageJson.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/readPackageJson.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { extractFile } from \"asar-electron-builder\"\nimport { log, warn } from \"electron-builder-util/out/log\"\nimport { readFile, readJson } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { Config } from \"../metadata\"\n\nconst normalizeData = require(\"normalize-package-data\")\n\nexport async function readPackageJson(file: string): Promise<any> {\n  const data = await readJson(file)\n  await authors(file, data)\n  normalizeData(data)\n  return data\n}\n\nasync function authors(file: string, data: any) {\n  if (data.contributors != null) {\n    return\n  }\n\n  let authorData\n  try {\n    authorData = await readFile(path.resolve(path.dirname(file), \"AUTHORS\"), \"utf8\")\n  }\n  catch (ignored) {\n    return\n  }\n\n  data.contributors = authorData\n    .split(/\\r?\\n/g)\n    .map(it => it.replace(/^\\s*#.*$/, \"\").trim())\n}\n\nfunction getConfigFromPackageData(metadata: any) {\n  if (metadata.directories != null) {\n    warn(`\"directories\" in the root is deprecated, please specify in the \"build\"`)\n    if (metadata.build == null) {\n      metadata.build = {directories: metadata.directories}\n    }\n    else if (metadata.build.directories == null) {\n      metadata.build.directories = metadata.directories\n    }\n    delete metadata.directories\n  }\n  return metadata.build\n}\n\nexport async function doLoadConfig(configFile: string, projectDir: string) {\n  const result = safeLoad(await readFile(configFile, \"utf8\"))\n  const relativePath = path.relative(projectDir, configFile)\n  log(`Using ${relativePath.startsWith(\"..\") ? configFile : relativePath} configuration file`)\n  return result\n}\n\nexport async function loadConfig(projectDir: string): Promise<Config | null> {\n  for (const configFile of [\"electron-builder.yml\", \"electron-builder.json\", \"electron-builder.json5\"]) {\n    try {\n      return await doLoadConfig(path.join(projectDir, configFile), projectDir)\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        throw e\n      }\n    }\n  }\n\n  try {\n    return getConfigFromPackageData(await readPackageJson(path.join(projectDir, \"package.json\")))\n  }\n  catch (e) {\n    if (e.code !== \"ENOENT\") {\n      throw e\n    }\n\n    try {\n      const file = extractFile(path.join(projectDir, \"app.asar\"), \"package.json\")\n      if (file != null) {\n        return getConfigFromPackageData(JSON.parse(file.toString()))\n      }\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        throw e\n      }\n    }\n\n    throw new Error(`Cannot find package.json in the ${projectDir}`)\n  }\n}\n\nexport async function getElectronVersion(config: Config | null | undefined, projectDir: string, projectMetadata?: any | null): Promise<string> {\n  // build is required, but this check is performed later, so, we should check for null\n  if (config != null && config.electronVersion != null) {\n    return config.electronVersion\n  }\n\n  // projectMetadata passed only for prepacked app asar and in this case no dev deps in the app.asar\n  if (projectMetadata == null) {\n    for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n      try {\n        return (await readJson(path.join(projectDir, \"node_modules\", name, \"package.json\"))).version\n      }\n      catch (e) {\n        if (e.code !== \"ENOENT\") {\n          warn(`Cannot read electron version from ${name} package.json: ${e.message}`)\n        }\n      }\n    }\n  }\n\n  const packageJsonPath = path.join(projectDir, \"package.json\")\n  const electronPrebuiltDep = findFromElectronPrebuilt(projectMetadata || await readJson(packageJsonPath))\n  if (electronPrebuiltDep == null) {\n    throw new Error(`Cannot find electron dependency to get electron version in the '${packageJsonPath}'`)\n  }\n\n  const firstChar = electronPrebuiltDep[0]\n  return firstChar === \"^\" || firstChar === \"~\" ? electronPrebuiltDep.substring(1) : electronPrebuiltDep\n}\n\nfunction findFromElectronPrebuilt(packageData: any): any {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    const devDependencies = packageData.devDependencies\n    let dep = devDependencies == null ? null : devDependencies[name]\n    if (dep == null) {\n      const dependencies = packageData.dependencies\n      dep = dependencies == null ? null : dependencies[name]\n    }\n    if (dep != null) {\n      return dep\n    }\n  }\n  return null\n}"
  ]
}
