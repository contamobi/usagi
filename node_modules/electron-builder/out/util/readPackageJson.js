"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getElectronVersion = exports.loadConfig = exports.doLoadConfig = exports.readPackageJson = undefined;

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

let readPackageJson = exports.readPackageJson = (() => {
    var _ref = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* (file) {
        const data = yield (0, (_fsExtraP || _load_fsExtraP()).readJson)(file);
        yield authors(file, data);
        normalizeData(data);
        return data;
    });

    return function readPackageJson(_x) {
        return _ref.apply(this, arguments);
    };
})();

let authors = (() => {
    var _ref2 = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* (file, data) {
        if (data.contributors != null) {
            return;
        }
        let authorData;
        try {
            authorData = yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(_path.resolve(_path.dirname(file), "AUTHORS"), "utf8");
        } catch (ignored) {
            return;
        }
        data.contributors = authorData.split(/\r?\n/g).map(function (it) {
            return it.replace(/^\s*#.*$/, "").trim();
        });
    });

    return function authors(_x2, _x3) {
        return _ref2.apply(this, arguments);
    };
})();

let doLoadConfig = exports.doLoadConfig = (() => {
    var _ref3 = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* (configFile, projectDir) {
        const result = (0, (_jsYaml || _load_jsYaml()).safeLoad)((yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(configFile, "utf8")));
        const relativePath = _path.relative(projectDir, configFile);
        (0, (_log || _load_log()).log)(`Using ${relativePath.startsWith("..") ? configFile : relativePath} configuration file`);
        return result;
    });

    return function doLoadConfig(_x4, _x5) {
        return _ref3.apply(this, arguments);
    };
})();

let loadConfig = exports.loadConfig = (() => {
    var _ref4 = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* (projectDir) {
        for (const configFile of ["electron-builder.yml", "electron-builder.json", "electron-builder.json5"]) {
            try {
                return yield doLoadConfig(_path.join(projectDir, configFile), projectDir);
            } catch (e) {
                if (e.code !== "ENOENT") {
                    throw e;
                }
            }
        }
        try {
            return getConfigFromPackageData((yield readPackageJson(_path.join(projectDir, "package.json"))));
        } catch (e) {
            if (e.code !== "ENOENT") {
                throw e;
            }
            try {
                const file = (0, (_asarElectronBuilder || _load_asarElectronBuilder()).extractFile)(_path.join(projectDir, "app.asar"), "package.json");
                if (file != null) {
                    return getConfigFromPackageData(JSON.parse(file.toString()));
                }
            } catch (e) {
                if (e.code !== "ENOENT") {
                    throw e;
                }
            }
            throw new Error(`Cannot find package.json in the ${projectDir}`);
        }
    });

    return function loadConfig(_x6) {
        return _ref4.apply(this, arguments);
    };
})();

let getElectronVersion = exports.getElectronVersion = (() => {
    var _ref5 = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* (config, projectDir, projectMetadata) {
        // build is required, but this check is performed later, so, we should check for null
        if (config != null && config.electronVersion != null) {
            return config.electronVersion;
        }
        // projectMetadata passed only for prepacked app asar and in this case no dev deps in the app.asar
        if (projectMetadata == null) {
            for (const name of ["electron", "electron-prebuilt", "electron-prebuilt-compile"]) {
                try {
                    return (yield (0, (_fsExtraP || _load_fsExtraP()).readJson)(_path.join(projectDir, "node_modules", name, "package.json"))).version;
                } catch (e) {
                    if (e.code !== "ENOENT") {
                        (0, (_log || _load_log()).warn)(`Cannot read electron version from ${name} package.json: ${e.message}`);
                    }
                }
            }
        }
        const packageJsonPath = _path.join(projectDir, "package.json");
        const electronPrebuiltDep = findFromElectronPrebuilt(projectMetadata || (yield (0, (_fsExtraP || _load_fsExtraP()).readJson)(packageJsonPath)));
        if (electronPrebuiltDep == null) {
            throw new Error(`Cannot find electron dependency to get electron version in the '${packageJsonPath}'`);
        }
        const firstChar = electronPrebuiltDep[0];
        return firstChar === "^" || firstChar === "~" ? electronPrebuiltDep.substring(1) : electronPrebuiltDep;
    });

    return function getElectronVersion(_x7, _x8, _x9) {
        return _ref5.apply(this, arguments);
    };
})();

var _asarElectronBuilder;

function _load_asarElectronBuilder() {
    return _asarElectronBuilder = require("asar-electron-builder");
}

var _log;

function _load_log() {
    return _log = require("electron-builder-util/out/log");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _jsYaml;

function _load_jsYaml() {
    return _jsYaml = require("js-yaml");
}

var _path = _interopRequireWildcard(require("path"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const normalizeData = require("normalize-package-data");

function getConfigFromPackageData(metadata) {
    if (metadata.directories != null) {
        (0, (_log || _load_log()).warn)(`"directories" in the root is deprecated, please specify in the "build"`);
        if (metadata.build == null) {
            metadata.build = { directories: metadata.directories };
        } else if (metadata.build.directories == null) {
            metadata.build.directories = metadata.directories;
        }
        delete metadata.directories;
    }
    return metadata.build;
}

function findFromElectronPrebuilt(packageData) {
    for (const name of ["electron", "electron-prebuilt", "electron-prebuilt-compile"]) {
        const devDependencies = packageData.devDependencies;
        let dep = devDependencies == null ? null : devDependencies[name];
        if (dep == null) {
            const dependencies = packageData.dependencies;
            dep = dependencies == null ? null : dependencies[name];
        }
        if (dep != null) {
            return dep;
        }
    }
    return null;
}
//# sourceMappingURL=readPackageJson.js.map