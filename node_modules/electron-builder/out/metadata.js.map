{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": ";;;;;;iCA4VwC,AAAgC,OAAE,AAAc;AACtF,AAAE,AAAC,QAAC,AAAK,UAAK,AAAS,AAAC,WAAC,AAAC;AACxB,AAAM,eAAC,AAAS,AAClB;AAAC;AACD,AAAE,AAAC,QAAC,AAAK,UAAK,AAAI,AAAC,MAAC,AAAC;AACnB,AAAM,eAAC,AAAI,AACb;AAAC;AAED,AAAE,AAAC,QAAC,EAAC,AAAK,MAAC,AAAQ,QAAC,AAAG,AAAC,AAAC,cAAC,AAAC;AACzB,AAAM,AAAC,kBAAG,AAAK,SAAI,AAAK,QAAG,AAAM,SAAG,AAAK,KAAE,AAC7C;AAAC;AAED,AAAM,WAAC,AAAK,MAAC,AAAO,QAAC,AAAK,QAAG,AAAM,SAAG,AAAO,SAAE,AAAK,QAAG,AAAO,UAAG,AAAM,AAAC,AAC1E;AAAC",
  "sourcesContent": [
    "import { Arch, Platform, TargetSpecificOptions } from \"electron-builder-core\"\nimport { Publish } from \"electron-builder-http/out/publishOptions\"\nimport { DebOptions, LinuxBuildOptions, SnapOptions } from \"./options/linuxOptions\"\nimport { DmgOptions, MacOptions, MasBuildOptions, PkgOptions } from \"./options/macOptions\"\nimport { AppXOptions, NsisOptions, SquirrelWindowsOptions, WinBuildOptions } from \"./options/winOptions\"\nimport { PlatformPackager } from \"./platformPackager\"\n\nexport interface AsarOptions {\n  dot?: boolean\n\n  smartUnpack?: boolean\n\n  ordering?: string | null\n\n  extraMetadata?: any | null\n}\n\n/**\n## Fields in the package.json\n\nSome standard fields should be defined in the `package.json`.\n */\nexport interface Metadata {\n  readonly repository?: string | RepositoryInfo | null\n\n  readonly dependencies?: { [key: string]: string }\n\n  readonly version?: string\n\n  /**\n   The application name.\n   @required\n   */\n  readonly name?: string\n\n  /**\n   As [name](#AppMetadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters\n   not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\n   */\n  readonly productName?: string | null\n\n  /**\n   The application description.\n   */\n  readonly description?: string\n\n  readonly main?: string | null\n\n  readonly author?: AuthorMetadata\n\n  /**\n   The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\n   If not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.\n   */\n  readonly homepage?: string | null\n\n  /**\n   *linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.\n   */\n  readonly license?: string | null\n\n  readonly build?: Config\n}\n\nexport interface RepositoryInfo {\n  readonly url: string\n}\n\nexport interface AuthorMetadata {\n  readonly name: string\n  readonly email?: string\n}\n\nexport type CompressionLevel = \"store\" | \"normal\" | \"maximum\"\n\nexport interface FilePattern {\n  from?: string\n  to?: string\n  filter?: Array<string> | string\n}\n\n/**\n ## Configuration Options\n */\nexport interface Config extends PlatformSpecificBuildOptions, TargetSpecificOptions {\n  /**\n  The application id. Used as\n  [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n  [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported).\n\n  Defaults to `com.electron.${name}`. It is strongly recommended that an explicit ID be set.\n   */\n  readonly appId?: string | null\n\n  /**\n  The human-readable copyright line for the app. Defaults to `Copyright Â© year author`.\n   */\n  readonly copyright?: string | null\n\n  // deprecated\n  readonly iconUrl?: string | null\n\n  /**\n   See [AppMetadata.productName](#AppMetadata-productName).\n   */\n  readonly productName?: string | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to include when copying files to create the package.\n\n   See [File Patterns](#multiple-glob-patterns).\n   */\n  readonly files?: Array<string> | string | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux/Windows).\n\n   Glob rules the same as for [files](#multiple-glob-patterns).\n   */\n  readonly extraResources?: Array<FilePattern> | FilePattern | Array<string> | string | null\n\n  /**\n   The same as [extraResources](#Config-extraResources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux/Windows).\n   */\n  readonly extraFiles?: Array<FilePattern> | FilePattern | Array<string> | string | null\n\n  /**\n  Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/). Defaults to `true`.\n  Node modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#Config-asarUnpack) - please file issue if this doesn't work.\n  */\n  readonly asar?: AsarOptions | boolean | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.\n   */\n  readonly asarUnpack?: Array<string> | string | null\n\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  readonly protocols?: Array<Protocol> | Protocol\n\n  readonly mac?: MacOptions | null\n  readonly dmg?: DmgOptions | null\n  readonly mas?: MasBuildOptions | null\n\n  readonly win?: WinBuildOptions  | null\n  readonly nsis?: NsisOptions  | null\n  readonly pkg?: PkgOptions  | null\n  readonly squirrelWindows?: SquirrelWindowsOptions  | null\n  readonly appx?: AppXOptions  | null\n\n  readonly linux?: LinuxBuildOptions | null\n  readonly deb?: DebOptions | null\n  readonly snap?: SnapOptions | null\n\n  /**\n   The compression level, one of `store`, `normal`, `maximum` (default: `normal`). If you want to rapidly test build, `store` can reduce build time significantly.\n   */\n  readonly compression?: CompressionLevel | null\n\n  /**\n   *programmatic API only* The function to be run after pack (but before pack into distributable format and sign). Promise must be returned.\n   */\n  readonly afterPack?: (context: AfterPackContext) => Promise<any> | null\n\n  /**\n   *programmatic API only* The function to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Promise must be returned. Resolving to `false` will skip dependencies install or rebuild.\n   */\n  readonly beforeBuild?: (context: BeforeBuildContext) => Promise<any> | null\n\n  /**\n   Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies (`npm rebuild`) before starting to package the app. Defaults to `true`.\n   */\n  readonly npmRebuild?: boolean\n\n  /**\n   Whether to omit using [--build-from-source](https://github.com/mapbox/node-pre-gyp#options) flag when installing app native deps. Defaults to `false`.\n   */\n  readonly npmSkipBuildFromSource?: boolean\n\n  /**\n   Additional command line arguments to use when installing app native deps. Defaults to `null`.\n   */\n  readonly npmArgs?: Array<string> | string | null\n\n  /**\n   Whether to execute `node-gyp rebuild` before starting to package the app. Defaults to `false`.\n   */\n  readonly nodeGypRebuild?: boolean\n\n  /**\n  The path to custom Electron build (e.g. `~/electron/out/R`). Only macOS supported, file issue if need for Linux or Windows.\n   */\n  readonly electronDist?: string\n\n  /**\n  The [electron-download](https://github.com/electron-userland/electron-download#usage) options.\n   */\n  readonly electronDownload?: any\n\n  readonly icon?: string | null\n\n  /**\n  See [publish](https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts#PublishConfiguration).\n   */\n  readonly publish?: Publish\n\n  /**\n  Whether to fail if application will be not signed (to prevent unsigned app if code signing configuration is not correct).\n   */\n  readonly forceCodeSigning?: boolean\n\n  readonly directories?: MetadataDirectories | null\n\n  /**\n  The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.\n   */\n  readonly electronVersion?: string | null\n\n  /**\n   The [artifact file name pattern](https://github.com/electron-userland/electron-builder/wiki/Options#artifact-file-name-pattern). Defaults to `${productName}-${version}.${ext}` (some target can have another defaults, see corresponding options).\n\n   Currently supported only for `pkg`, `dmg` and `nsis`.\n   */\n  readonly artifactName?: string | null\n}\n\nexport interface AfterPackContext {\n  readonly appOutDir: string\n  readonly packager: PlatformPackager<any>\n  readonly electronPlatformName: string\n  readonly arch: Arch\n}\n\nexport interface BeforeBuildContext {\n  readonly appDir: string\n  readonly electronVersion: string\n  readonly platform: Platform\n  readonly arch: string\n}\n\n/**\n ### `fileAssociations` File Associations\n\n macOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only. Array of option objects.\n\n On Windows works only if [nsis.perMachine](https://github.com/electron-userland/electron-builder/wiki/Options#NsisOptions-perMachine) is set to `true`.\n */\nexport interface FileAssociation {\n  /**\n  The extension (minus the leading period). e.g. `png`.\n   */\n  readonly ext: string | Array<string>\n\n  /**\n   The name. e.g. `PNG`. Defaults to `ext`.\n   */\n  readonly name?: string | null\n\n  /**\n   *windows-only.* The description.\n   */\n  readonly description?: string | null\n\n  /**\n   The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n   */\n  readonly icon?: string\n\n  /**\n  *macOS-only* The appâs role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Defaults to `Editor`. Corresponds to `CFBundleTypeRole`.\n   */\n  readonly role?: string\n\n  /**\n  *macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.\n   */\n  readonly isPackage?: boolean\n}\n\n/**\n ### `protocols` URL Protocol Schemes\n\n Protocols to associate the app with. macOS only.\n\n Please note â on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).\n */\nexport interface Protocol {\n  /**\n   The name. e.g. `IRC server URL`.\n   */\n  readonly name: string\n\n  /**\n  *macOS-only* The appâs role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Defaults to `Editor`.\n  */\n  readonly role?: string\n\n  /**\n  The schemes. e.g. `[\"irc\", \"ircs\"]`.\n  */\n  readonly schemes: Array<string>\n}\n\n/**\n ### `directories`\n */\nexport interface MetadataDirectories {\n  /**\n   The path to build resources, defaults to `build`.\n   */\n  readonly buildResources?: string | null\n\n  /**\n   The output directory, defaults to `dist`.\n   */\n  readonly output?: string | null\n\n  /**\n   The application directory (containing the application package.json), defaults to `app`, `www` or working directory.\n   */\n  readonly app?: string | null\n}\n\nexport interface PlatformSpecificBuildOptions extends TargetSpecificOptions {\n  readonly files?: Array<string> | string | null\n  readonly extraFiles?: Array<FilePattern> | FilePattern | Array<string> | string | null\n  readonly extraResources?: Array<FilePattern> | FilePattern | Array<string> | string | null\n\n  readonly asarUnpack?: Array<string> | string | null\n\n  readonly asar?: AsarOptions | boolean | null\n\n  readonly target?: Array<string> | string | null\n\n  readonly icon?: string | null\n\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  readonly publish?: Publish\n}\n\nexport interface Macros {\n  os: string\n  arch: string\n}\n\nexport function getPlatformIconFileName(value: string | null | undefined, isMac: boolean) {\n  if (value === undefined) {\n    return undefined\n  }\n  if (value === null) {\n    return null\n  }\n\n  if (!value.includes(\".\")) {\n    return `${value}.${isMac ? \"icns\" : \"ico\"}`\n  }\n\n  return value.replace(isMac ? \".ico\" : \".icns\", isMac ? \".icns\" : \".ico\")\n}"
  ]
}
