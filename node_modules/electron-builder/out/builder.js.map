{
  "version": 3,
  "file": "builder.js",
  "sourceRoot": "",
  "sources": [
    "../src/builder.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Packager, normalizePlatforms } from \"./packager\"\nimport { PublishOptions } from \"electron-builder-publisher\"\nimport { executeFinally } from \"electron-builder-util/out/promise\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { isEmptyOrSpaces } from \"electron-builder-util\"\nimport { Platform, Arch, archFromString } from \"electron-builder-core\"\nimport { DIR_TARGET } from \"./targets/targetFactory\"\nimport { PackagerOptions } from \"./packagerApi\"\nimport { PublishManager } from \"./publish/PublishManager\"\nimport { warn } from \"electron-builder-util/out/log\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\n\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\n}\n\nexport interface CliOptions extends PackagerOptions, PublishOptions {\n  mac?: Array<string>\n  linux?: Array<string>\n  win?: Array<string>\n\n  arch?: string\n\n  x64?: boolean\n  ia32?: boolean\n  armv7l?: boolean\n\n  dir?: boolean\n\n  platform?: string\n\n  project?: string\n}\n\nfunction addValue<K, T>(map: Map<K, Array<T>>, key: K, value: T) {\n  const list = map.get(key)\n  if (list == null) {\n    map.set(key, [value])\n  }\n  else {\n    list.push(value)\n  }\n}\n\nexport function normalizeOptions(args: CliOptions): BuildOptions {\n  if (args.targets != null) {\n    return args\n  }\n\n  let targets = new Map<Platform, Map<Arch, Array<string>>>()\n\n  function processTargets(platform: Platform, types: Array<string>) {\n    if (args.platform != null) {\n      throw new Error(`--platform cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n    if (args.arch != null) {\n      throw new Error(`--arch cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n\n    function commonArch(): Array<Arch> {\n      const result = Array<Arch>()\n      if (args.x64) {\n        result.push(Arch.x64)\n      }\n      if (args.armv7l) {\n        result.push(Arch.armv7l)\n      }\n      if (args.ia32) {\n        result.push(Arch.ia32)\n      }\n\n      return result.length === 0 ? [archFromString(process.arch)] : result\n    }\n\n    let archToType = targets.get(platform)\n    if (archToType == null) {\n      archToType = new Map<Arch, Array<string>>()\n      targets.set(platform, archToType)\n    }\n\n    if (types.length === 0) {\n      const defaultTargetValue = args.dir ? [DIR_TARGET] : []\n      if (platform === Platform.MAC) {\n        archToType.set(Arch.x64, defaultTargetValue)\n      }\n      else {\n        for (const arch of commonArch()) {\n          archToType.set(arch, defaultTargetValue)\n        }\n      }\n      return\n    }\n\n    for (const type of types) {\n      let arch: string\n      if (platform === Platform.MAC) {\n        arch = \"x64\"\n        addValue(archToType, Arch.x64, type)\n      }\n      else {\n        const suffixPos = type.lastIndexOf(\":\")\n        if (suffixPos > 0) {\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n        }\n        else {\n          for (const arch of commonArch()) {\n            addValue(archToType, arch, type)\n          }\n        }\n      }\n    }\n  }\n\n  if (args.mac != null) {\n    processTargets(Platform.MAC, args.mac)\n  }\n\n  if (args.linux != null) {\n    processTargets(Platform.LINUX, args.linux)\n  }\n\n  if (args.win != null) {\n    processTargets(Platform.WINDOWS, args.win)\n  }\n\n  if (targets.size === 0) {\n    if (args.platform == null && args.arch == null) {\n      processTargets(Platform.current(), [])\n    }\n    else {\n      targets = createTargets(normalizePlatforms(args.platform), args.dir ? DIR_TARGET : null, args.arch)\n    }\n  }\n\n  const result = Object.assign({}, args)\n  result.targets = targets\n\n  delete result.dir\n  delete result.mac\n  delete result.linux\n  delete result.win\n  delete result.platform\n  delete result.arch\n\n  const r = <any>result\n  delete r.em\n\n  delete r.m\n  delete r.o\n  delete r.l\n  delete r.w\n  delete r.windows\n  delete r.macos\n  delete r.$0\n  delete r._\n  delete r.version\n  delete r.help\n\n  delete result.ia32\n  delete result.x64\n  delete result.armv7l\n\n  if (result.project != null && result.projectDir == null) {\n    result.projectDir = result.project\n  }\n  delete result.project\n  return result\n}\n\nexport function createTargets(platforms: Array<Platform>, type?: string | null, arch?: string | null): Map<Platform, Map<Arch, Array<string>>> {\n  const targets = new Map<Platform, Map<Arch, Array<string>>>()\n  for (const platform of platforms) {\n    const archs = platform === Platform.MAC ? [Arch.x64] : (arch === \"all\" ? [Arch.x64, Arch.ia32] : [archFromString(arch == null ? process.arch : arch)])\n    const archToType = new Map<Arch, Array<string>>()\n    targets.set(platform, archToType)\n\n    for (const arch of archs) {\n      archToType.set(arch, type == null ? [] : [type])\n    }\n  }\n  return targets\n}\n\nexport async function build(rawOptions?: CliOptions): Promise<Array<string>> {\n  const options = normalizeOptions(rawOptions || {})\n\n  if (options.cscLink === undefined && !isEmptyOrSpaces(process.env.CSC_LINK)) {\n    options.cscLink = process.env.CSC_LINK\n  }\n  if (options.cscInstallerLink === undefined && !isEmptyOrSpaces(process.env.CSC_INSTALLER_LINK)) {\n    options.cscInstallerLink = process.env.CSC_INSTALLER_LINK\n  }\n  if (options.cscKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_KEY_PASSWORD)) {\n    options.cscKeyPassword = process.env.CSC_KEY_PASSWORD\n  }\n  if (options.cscInstallerKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_INSTALLER_KEY_PASSWORD)) {\n    options.cscInstallerKeyPassword = process.env.CSC_INSTALLER_KEY_PASSWORD\n  }\n\n  if (options.draft === undefined && !isEmptyOrSpaces(process.env.EP_DRAFT)) {\n    options.draft = process.env.EP_DRAFT.toLowerCase() === \"true\"\n  }\n  if (options.prerelease === undefined && !isEmptyOrSpaces(process.env.EP_PRELEASE)) {\n    options.prerelease = process.env.EP_PRELEASE.toLowerCase() === \"true\"\n  }\n\n  const cancellationToken = new CancellationToken()\n  const packager = new Packager(options, cancellationToken)\n  // because artifact event maybe dispatched several times for different publish providers\n  const artifactPaths = new Set<string>()\n  packager.artifactCreated(event => {\n    if (event.file != null) {\n      artifactPaths.add(event.file)\n    }\n  })\n\n  const publishManager = new PublishManager(packager, options, cancellationToken)\n  const buildPromise = <BluebirdPromise<Array<string>>>packager.build().then(() => Array.from(artifactPaths))\n  process.on(\"SIGINT\", () => {\n    warn(\"Cancelled by SIGINT\")\n    cancellationToken.cancel()\n    buildPromise.cancel()\n    publishManager.cancelTasks()\n  })\n\n  return await executeFinally(buildPromise, errorOccurred => {\n    if (errorOccurred) {\n      publishManager.cancelTasks()\n      return BluebirdPromise.resolve(null)\n    }\n    else {\n      return publishManager.awaitTasks()\n    }\n  })\n}"
  ]
}
