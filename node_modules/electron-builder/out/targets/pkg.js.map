{
  "version": 3,
  "file": "pkg.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/pkg.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { exec, use } from \"electron-builder-util\"\nimport MacPackager from \"../macPackager\"\nimport * as path from \"path\"\nimport { Target, Arch } from \"electron-builder-core\"\nimport { PkgOptions } from \"../options/macOptions\"\nimport { statOrNull } from \"electron-builder-util/out/fs\"\nimport { findIdentity } from \"../codeSign\"\nimport { filterCFBundleIdentifier } from \"../packager/mac\"\nimport { unlink } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\n\n// http://www.shanekirk.com/2013/10/creating-flat-packages-in-osx/\nexport class PkgTarget extends Target {\n  private readonly options: PkgOptions = this.packager.config.pkg || Object.create(null)\n  private readonly installLocation = this.options.installLocation || \"/Applications\"\n\n  constructor(private readonly packager: MacPackager, readonly outDir: string) {\n    super(\"pkg\")\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n    const appInfo = packager.appInfo\n\n    const keychainName = (await packager.codeSigningInfo).keychainName\n    const certType = \"Developer ID Installer\"\n    const identity = await findIdentity(certType, options.identity || packager.platformSpecificBuildOptions.identity, keychainName)\n    if (identity == null && packager.forceCodeSigning) {\n      throw new Error(`Cannot find valid \"${certType}\" to sign standalone installer, please see https://github.com/electron-userland/electron-builder/wiki/Code-Signing`)\n    }\n\n    const appPath = path.join(appOutDir, `${appInfo.productFilename}.app`)\n\n    const distInfo = path.join(appOutDir, \"distribution.xml\")\n    await exec(\"productbuild\", [\"--synthesize\", \"--component\", appPath, this.installLocation, distInfo], {\n      cwd: appOutDir,\n    })\n\n    // to use --scripts, we must build .app bundle separately using pkgbuild\n    // productbuild --scripts doesn't work (because scripts in this case not added to our package)\n    // https://github.com/electron-userland/electron-osx-sign/issues/96#issuecomment-274986942\n    const innerPackageFile = path.join(appOutDir, `${filterCFBundleIdentifier(appInfo.id)}.pkg`)\n    await this.buildComponentPackage(appPath, innerPackageFile)\n\n    const outFile = path.join(appOutDir, packager.expandArtifactNamePattern(options, \"pkg\"))\n    const args = prepareProductBuildArgs(identity, keychainName)\n    args.push(\"--distribution\", distInfo)\n    args.push(outFile)\n\n    use(options.productbuild, it => args.push(...<any>it))\n\n    await exec(\"productbuild\", args, {\n      cwd: appOutDir,\n    })\n    await BluebirdPromise.all([unlink(innerPackageFile), unlink(distInfo)])\n\n    packager.dispatchArtifactCreated(outFile, this, `${appInfo.name}-${appInfo.version}.pkg`)\n  }\n\n  private async buildComponentPackage(appPath: string, outFile: string) {\n    const options = this.options\n    const args = [\n      \"--component\", appPath,\n      \"--install-location\", this.installLocation,\n    ]\n    if (options.scripts != null) {\n      args.push(\"--scripts\", path.resolve(this.packager.buildResourcesDir, options.scripts))\n    }\n    else if (options.scripts !== null) {\n      const dir = path.join(this.packager.buildResourcesDir, \"pkg-scripts\")\n      const stat = await statOrNull(dir)\n      if (stat != null && stat.isDirectory()) {\n        args.push(\"--scripts\", dir)\n      }\n    }\n\n    args.push(outFile)\n    await exec(\"pkgbuild\", args)\n  }\n}\n\nexport function prepareProductBuildArgs(identity: string | n, keychain: string | n) {\n  const args = []\n  if (identity != null) {\n    args.push(\"--sign\", identity)\n    if (keychain != null) {\n      args.push(\"--keychain\", keychain)\n    }\n  }\n  return args\n}"
  ]
}
