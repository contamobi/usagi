{
  "version": 3,
  "file": "ArchiveTarget.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/ArchiveTarget.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAM,AAAQ,AAAQ,AAAE,AAAM,AAAuB;;;;;;AAE9D,AAAO,AAAE,AAAG,AAAE,AAAM,AAA+B;;;;AACnD,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAG,AAAE,AAAO,AAAE,AAAM,AAAW,AAExC,AAAM;;;;;;MAAqB,AAAQ,AAAM;AACvC,gBAAY,AAAY,MAAW,AAAc,QAAmB,AAA+B;AACjG,AAAK,cAAC,AAAI,AAAC;AADsB,aAAM,SAAN,AAAM,AAAQ;AAAmB,aAAQ,WAAR,AAAQ,AAAuB,AAEnG;AAAC;AAEK,AAAK,SAAX,AAAK,CAAO,AAAiB,WAAE,AAAU;;;;AACvC,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,kBAAM,AAAK,QAAG,AAAQ,SAAC,AAAQ,aAAK,AAAQ,+DAAC,AAAG;AAChD,kBAAM,AAAM,SAAG,AAAI,MAAC,AAAM;AAE1B,kBAAM,AAAM,SAAG,AAAI,MAAC,AAAI;AACxB,AAAG,AAAC,uDAAY,AAAK,QAAG,AAAQ,WAAG,AAAE,KAAG,AAAM,MAAE,AAAC;AAEjD,AAA4F;AAC5F,kBAAM,AAAO,UAAI;AACf,AAAM,AAAC,wBAAC,AAAQ,SAAC,AAAQ,AAAC,AAAC,AAAC;AAC1B,yBAAK,AAAQ,+DAAC,AAAG;AACf,AAAM,+BAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAQ,SAAC,AAAa,cAAC,AAAM,QAAE,AAAK,OAAE,AAAK,AAAC,AAAC;AAC3E,yBAAK,AAAQ,+DAAC,AAAO;AACnB,AAAM,+BAAC,AAAI,MAAC,AAAI,KAAC,AAAM,QAAE,AAAQ,SAAC,AAAY,aAAC,AAAM,QAAE,AAAI,MAAE,AAAK,OAAE,AAAK,AAAC,AAAC;AAC7E,yBAAK,AAAQ,+DAAC,AAAK;AACjB,AAAM,+BAAC,AAAI,MAAC,AAAI,KAAC,AAAM,QAAE,AAAQ,SAAC,AAAY,aAAC,AAAM,QAAE,AAAI,MAAE,AAAI,AAAC,AAAC;AACrE;AACE,8BAAM,IAAI,AAAK,AAAC,2BAAqB,AAAQ,SAAC,AAAQ,QAAE,AAAC,AAC7D,AAAC,AACH;;AAAC,AAAC,AAAE,aAXY;AAahB,kBAAM,AAAY,eAAG,AAAK,QAAG,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAe,eAAM,AAAC,UAAG,AAAS;AACxG,AAAE,AAAC,gBAAC,AAAM,OAAC,AAAU,WAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AAC9B,sBAAM,AAAG,uCAAC,AAAQ,SAAC,AAAM,OAAC,AAAW,aAAE,AAAM,QAAE,AAAO,SAAE,AAAY,cAAE,AAAK,AAAC,AAC9E;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAO,2CAAC,AAAQ,SAAC,AAAM,OAAC,AAAW,aAAE,AAAM,QAAE,AAAO,SAAE,AAAY,AAAC,AAC3E;AAAC;AAED,AAAQ,qBAAC,AAAuB,wBAAC,AAAO,AAAE,AAAI,gBAAE,AAAK,QAAG,AAAQ,SAAC,AAAa,cAAC,AAAM,QAAE,AAAK,OAAE,AAAI,AAAC,QAAG,AAAQ,SAAC,AAAY,aAAC,AAAM,QAAE,AAAI,MAAE,AAAI,MAAE,AAAQ,SAAC,AAAQ,aAAK,AAAQ,+DAAC,AAAO,UAAG,AAAK,QAAG,AAAI,AAAC,AAAC,AACzM;;AAAC,AACF",
  "sourcesContent": [
    "import { Target, Arch, Platform } from \"electron-builder-core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { log } from \"electron-builder-util/out/log\"\nimport * as path from \"path\"\nimport { tar, archive } from \"./archive\"\n\nexport class ArchiveTarget extends Target {\n  constructor(name: string, readonly outDir: string, private readonly packager: PlatformPackager<any>) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const isMac = packager.platform === Platform.MAC\n    const outDir = this.outDir\n\n    const format = this.name\n    log(`Building ${isMac ? \"macOS \" : \"\"}${format}`)\n\n    // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n    const outFile = (() => {\n      switch (packager.platform) {\n        case Platform.MAC:\n          return path.join(appOutDir, packager.generateName2(format, \"mac\", false))\n        case Platform.WINDOWS:\n          return path.join(outDir, packager.generateName(format, arch, false, \"win\"))\n        case Platform.LINUX:\n          return path.join(outDir, packager.generateName(format, arch, true))\n        default:\n          throw new Error(`Unknown platform: ${packager.platform}`)\n      }\n    })()\n\n    const dirToArchive = isMac ? path.join(appOutDir, `${packager.appInfo.productFilename}.app`) : appOutDir\n    if (format.startsWith(\"tar.\")) {\n      await tar(packager.config.compression, format, outFile, dirToArchive, isMac)\n    }\n    else {\n      await archive(packager.config.compression, format, outFile, dirToArchive)\n    }\n\n    packager.dispatchArtifactCreated(outFile, this, isMac ? packager.generateName2(format, \"mac\", true) : packager.generateName(format, arch, true, packager.platform === Platform.WINDOWS ? \"win\" : null))\n  }\n}"
  ]
}
