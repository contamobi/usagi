{
  "version": 3,
  "file": "targetFactory.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/targetFactory.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,AAAO,AAAQ,AAAM,AAAE,AAAM,AAAuB;;;;;;AACpD,AAAO,AAAE,AAAa,AAAE,AAAM,AAAiB;;;;;;AAE/C,MAAM,AAAc,iBAAG,IAAI,AAAG,IAAC,CAAC,AAAK,OAAE,AAAI,MAAE,AAAQ,UAAE,AAAQ,UAAE,AAAQ,UAAE,AAAS,AAAC,AAAC,AACtF,AAAM;AAAC,MAAM,AAAc,0CAAG,AAAS,AACvC,AAAM;AAAC,MAAM,AAAU,kCAAG,AAAK,AAE/B,AAAM;uBAAwB,AAAiC,cAAE,AAA0B,SAAE,AAAc,QAAE,AAA+B,UAAE,AAAuC;AACnL,UAAM,AAAM,SAAkB,AAAE;AAEhC,UAAM,AAAM,SAAG,CAAC,AAAY,MAAE,AAAmC;AAC/D,YAAI,AAAM,SAAG,AAAY,aAAC,AAAG,IAAC,AAAI,AAAC;AACnC,AAAE,AAAC,YAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnB,AAAM,qBAAG,AAAO,QAAC,AAAM,AAAC;AACxB,AAAY,yBAAC,AAAG,IAAC,AAAI,MAAE,AAAM,AAAC,AAChC;AAAC;AACD,AAAM,eAAC,AAAI,KAAC,AAAM,AAAC,AACrB;AAAC;AAED,UAAM,AAAO,UAAG,AAAgB,iBAAC,AAAO,WAAI,AAAI,QAAI,AAAO,QAAC,AAAM,WAAK,AAAC,IAAG,AAAQ,SAAC,AAA4B,6BAAC,AAAM,SAAG,AAAO,SAAE,AAAQ,SAAC,AAAa,AAAC;AAC1J,AAAQ,aAAC,AAAa,cAAC,AAAO,SAAE,AAAM,QAAE,AAAY,AAAC;AACrD,AAAM,WAAC,AAAM,AACf;AAAC;AAED,0BAA0B,AAAkD,SAAE,AAA4B;AACxG,AAAE,AAAC,QAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAM,eAAC,AAAa,AACtB;AAAC;AAED,UAAM,AAAI,OAAkB,AAAE;AAC9B,AAAG,AAAC,SAAC,MAAM,AAAC,AAAI,KAAC,AAAK,MAAC,AAAO,QAAC,AAAO,AAAC,WAAG,AAAO,UAAG,CAAC,AAAO,AAAC,AAAC,AAAC,UAAC,AAAC;AAC/D,cAAM,AAAI,OAAG,AAAC,EAAC,AAAW,AAAE,cAAC,AAAI,AAAE;AACnC,AAAE,AAAC,YAAC,AAAI,SAAK,AAAc,AAAC,gBAAC,AAAC;AAC5B,AAAI,iBAAC,AAAI,AAAC,oCAAG,AAAa,AAAC,AAC7B;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,iBAAC,AAAI,KAAC,AAAI,AAAC,AACjB;AAAC,AACH;AAAC;AACD,AAAM,WAAC,AAAI,AACb;AAAC,AAED,AAAM;4BAA6B,AAAc,QAAE,AAAc,QAAE,AAA+B;AAChG,AAAE,AAAC,QAAC,AAAc,eAAC,AAAG,IAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AAC/B,AAAM,eAAC,AAAI,AAAa,4DAAC,AAAM,QAAE,AAAM,QAAE,AAAQ,AAAC,AACpD;AAAC,AACD,AAAI,eAAK,AAAM,WAAK,AAAK,AAAC,OAAC,AAAC;AAC1B,AAAM,eAAC,IAAI,AAAU,WAAC,AAAK,AAAC,AAC9B;AAAC,AACD,AAAI,KAHC,AAAE,AAAC,MAGH,AAAC;AACJ,cAAM,IAAI,AAAK,AAAC,yBAAmB,AAAM,MAAE,AAAC,AAC9C;AAAC,AACH;AAAC,AAED,AAAM;MAAkB,AAAQ,AAAM;AACpC,QAAI,AAAM;AACR,cAAM,IAAI,AAAK,MAAC,AAAY,AAAC,AAC/B;AAAC;AAEK,AAAK,SAAX,AAAK,CAAO,AAAiB,WAAE,AAAU;AACvC,AAAW,AACb;;;AAAC,AACF",
  "sourcesContent": [
    "import { PlatformPackager } from \"../platformPackager\"\nimport { Arch, Target } from \"electron-builder-core\"\nimport { ArchiveTarget } from \"./ArchiveTarget\"\n\nconst archiveTargets = new Set([\"zip\", \"7z\", \"tar.xz\", \"tar.lz\", \"tar.gz\", \"tar.bz2\"])\nexport const DEFAULT_TARGET = \"default\"\nexport const DIR_TARGET = \"dir\"\n\nexport function createTargets(nameToTarget: Map<String, Target>, rawList: Array<string> | n, outDir: string, packager: PlatformPackager<any>, cleanupTasks: Array<() => Promise<any>>): Array<Target> {\n  const result: Array<Target> = []\n\n  const mapper = (name: string, factory: (outDir: string) => Target) => {\n    let target = nameToTarget.get(name)\n    if (target == null) {\n      target = factory(outDir)\n      nameToTarget.set(name, target)\n    }\n    result.push(target)\n  }\n\n  const targets = normalizeTargets(rawList == null || rawList.length === 0 ? packager.platformSpecificBuildOptions.target : rawList, packager.defaultTarget)\n  packager.createTargets(targets, mapper, cleanupTasks)\n  return result\n}\n\nfunction normalizeTargets(targets: Array<string> | string | null | undefined, defaultTarget: Array<string>): Array<string> {\n  if (targets == null) {\n    return defaultTarget\n  }\n\n  const list: Array<string> = []\n  for (const t of (Array.isArray(targets) ? targets : [targets])) {\n    const name = t.toLowerCase().trim()\n    if (name === DEFAULT_TARGET) {\n      list.push(...defaultTarget)\n    }\n    else {\n      list.push(name)\n    }\n  }\n  return list\n}\n\nexport function createCommonTarget(target: string, outDir: string, packager: PlatformPackager<any>): Target {\n  if (archiveTargets.has(target)) {\n    return new ArchiveTarget(target, outDir, packager)\n  }\n  else if (target === \"dir\") {\n    return new NoOpTarget(\"dir\")\n  }\n  else {\n    throw new Error(`Unknown target: ${target}`)\n  }\n}\n\nexport class NoOpTarget extends Target {\n  get outDir(): string {\n    throw new Error(\"NoOpTarget\")\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    // no build\n  }\n}"
  ]
}
