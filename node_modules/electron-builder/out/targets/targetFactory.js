"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NoOpTarget = exports.DIR_TARGET = exports.DEFAULT_TARGET = undefined;

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

exports.createTargets = createTargets;
exports.createCommonTarget = createCommonTarget;

var _electronBuilderCore;

function _load_electronBuilderCore() {
    return _electronBuilderCore = require("electron-builder-core");
}

var _ArchiveTarget;

function _load_ArchiveTarget() {
    return _ArchiveTarget = require("./ArchiveTarget");
}

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

const archiveTargets = new Set(["zip", "7z", "tar.xz", "tar.lz", "tar.gz", "tar.bz2"]);
const DEFAULT_TARGET = exports.DEFAULT_TARGET = "default";
const DIR_TARGET = exports.DIR_TARGET = "dir";
function createTargets(nameToTarget, rawList, outDir, packager, cleanupTasks) {
    const result = [];
    const mapper = (name, factory) => {
        let target = nameToTarget.get(name);
        if (target == null) {
            target = factory(outDir);
            nameToTarget.set(name, target);
        }
        result.push(target);
    };
    const targets = normalizeTargets(rawList == null || rawList.length === 0 ? packager.platformSpecificBuildOptions.target : rawList, packager.defaultTarget);
    packager.createTargets(targets, mapper, cleanupTasks);
    return result;
}
function normalizeTargets(targets, defaultTarget) {
    if (targets == null) {
        return defaultTarget;
    }
    const list = [];
    for (const t of Array.isArray(targets) ? targets : [targets]) {
        const name = t.toLowerCase().trim();
        if (name === DEFAULT_TARGET) {
            list.push.apply(list, _toConsumableArray(defaultTarget));
        } else {
            list.push(name);
        }
    }
    return list;
}
function createCommonTarget(target, outDir, packager) {
    if (archiveTargets.has(target)) {
        return new (_ArchiveTarget || _load_ArchiveTarget()).ArchiveTarget(target, outDir, packager);
    } else if (target === "dir") {
        return new NoOpTarget("dir");
    } else {
        throw new Error(`Unknown target: ${target}`);
    }
}
class NoOpTarget extends (_electronBuilderCore || _load_electronBuilderCore()).Target {
    get outDir() {
        throw new Error("NoOpTarget");
    }
    build(appOutDir, arch) {
        // no build

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {})();
    }
}
exports.NoOpTarget = NoOpTarget; //# sourceMappingURL=targetFactory.js.map