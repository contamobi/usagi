{
  "version": 3,
  "file": "nsis.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/nsis.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AACA,AAAO,AAAE,AAAI,AAAE,AAAK,AAAE,AAAO,AAAE,AAAa,AAAE,AAAG,AAAE,AAAO,AAAE,AAAe,AAAE,AAAM,AAAuB;;;;AAC1G,AAAO,AAAK,AAAI,AAAM,AAAM,AAC5B,AAAO,AAAe,AAAM,AAAgB;;;;AAC5C,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAuC;;;;;;AACzE,AAAO,AAAE,AAAE,AAAI,AAAK,AAAE,AAAM,AAAW;;;;;;AACvC,AAAO,AAAE,AAAY,AAAE,AAAM,AAAqB;;;;;;AAClD,AAAO,AAAE,AAAO,AAAE,AAAM,AAAW;;;;;;AACnC,AAAO,AAAE,AAAO,AAAE,AAAG,AAAE,AAAI,AAAE,AAAM,AAA+B;;;;;;AAClE,AAAO,AAAE,AAAM,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AAE7C,AAAO,AAAE,AAAM,AAAE,AAAI,AAAE,AAAQ,AAAE,AAAM,AAAuB;;;;;;AAC9D,AAAO,AAAgB,AAAM,AAAmB;;;;;;AAChD,AAAO,AAAE,AAAQ,AAAE,AAAM,AAA8B;;;;;;AACvD,AAAO,AAAE,AAAkB,AAAE,AAAiB,AAAE,AAA8B,AAAE,AAAM,AAA2B;;;;;;AACjH,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAoB;;;;;;AACtD,AAAO,AAAE,AAAuB,AAAE,AAAM,AAAa;;;;;;;;AAErD,MAAM,AAAwB,2BAAG,AAAsC;AAEvE,MAAM,AAAe,kBAAG,AAAiB,6DAAC,AAAM,QAAE,AAAS,WAAE,AAAkE,AAAC;AAChI,MAAM,AAAuB,0BAAG,AAAiB,6DAAC,AAAgB,kBAAE,AAAO,SAAE,AAAkE,AAAC;AAEhJ,MAAM,AAA4B,+BAAG,AAAK,AAE1C,AAAM,AAAC,AAAO;MAAkB,AAAQ,AAAM;AAO5C,gBAAoB,AAAqB,UAAW,AAAc,QAAE,AAAkB;AACpF,AAAK,cAAC,AAAU,AAAC;AADC,aAAQ,WAAR,AAAQ,AAAa;AAAW,aAAM,SAAN,AAAM,AAAQ;AAJ1D,aAAK,QAAsB,IAAI,AAAG,AAAE;AAE3B,aAAgB,mBAAG,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAE,AAAW,aAAE,AAAM,AAAC;AAKvF,YAAI,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAM,OAAC,AAAI,QAAI,AAAM,OAAC,AAAM,OAAC,AAAI,AAAC;AAC9D,AAAE,AAAC,YAAC,AAAU,eAAK,AAAM,AAAC,QAAC,AAAC;AAC1B,AAAO,sBAAG,AAAM,OAAC,AAAM,OAAC,AAAO,SAAQ,AAAI,KAAC,AAAQ,SAAC,AAAO,OAAC,AAAU,AAAC,AAAC,AAC3E;AAAC;AACD,AAAI,aAAC,AAAO,UAAG,AAAO;AAEtB,cAAM,AAAI,OAAG,AAAQ,SAAC,AAAI,KAAC,AAAQ,SAAC,AAAY;AAChD,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,QAAI,AAAI,KAAC,AAA2B,AAAC,gCAAI,AAAI,AAAC,MAAC,AAAC;AAC9D,AAAI,4CAAC,AAAiE,AAAC,AACzE;AAAC,AACH;AAAC;AAEK,AAAK,SAAX,AAAK,CAAO,AAAiB,WAAE,AAAU;;;;AACvC,AAAI,kBAAC,AAAK,MAAC,AAAG,IAAC,AAAI,MAAE,AAAS,AAAC,AACjC;;AAAC;AAEa,AAAe,mBAArB,AAAK,CAAiB,AAAiB,WAAE,AAAU;;;;AACzD,kBAAM,AAAe,kDAAC,AAAG,IAAC,CACxB,AAAQ,kCAAC,AAAI,MAAC,AAAI,MAAC,MAAM,AAAe,kBAAE,AAAa,AAAC,gBAAE,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAW,aAAE,AAAa,AAAC,gBAAE,AAAI,MAAE,AAAK,AAAC,QACxH,AAAQ,kCAAC,AAAI,MAAC,AAAI,MAAC,MAAM,AAAiB,AAAE,yEAAE,AAAY,cAAE,AAAI,2DAAC,AAAI,AAAC,OAAE,AAAc,AAAC,iBAAE,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAW,aAAE,AAAc,AAAC,iBAAE,AAAI,MAAE,AAAK,AAAC,AACzJ,AAAC;AAEF,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAQ;AAC9B,kBAAM,AAAM,SAAG,AAAI,OAAC,AAAO,QAAC,AAAM,SAAG,AAAK,QAAG,AAAI;AACjD,kBAAM,AAAW,cAAG,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAM,AAAE,WAAG,AAAQ,SAAC,AAAO,QAAC,AAAI,QAAI,AAAQ,SAAC,AAAO,QAAC,AAAO,WAAI,AAAI,2DAAC,AAAI,AAAC,cAAS,AAAM,MAAE,AAAC;AAC/H,AAAM,mBAAC,MAAM,AAAO,2CAAC,AAAQ,SAAC,AAAM,OAAC,AAAW,aAAE,AAAM,QAAE,AAAW,aAAE,AAAS,WAAE,AAAI,AAAC,AACzF;;AAAC;AAEK,AAAW,eAAjB,AAAK;;;;AACH,AAAG,2CAAC,AAAyB,AAAC;AAC9B,kBAAM,AAAa,gBAAkB,AAAE;AACvC,gBAAI,AAAC;AACH,sBAAM,AAAI,OAAC,AAAc,eAAC,AAAa,AAAC,AAC1C;AAAC,sBACO,AAAC;AACP,AAAE,AAAC,oBAAC,AAAa,cAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AAC7B,4EAAsB,AAAG,IAAC,AAAa;AAAE,AAAE,+BAAI,AAAM,4CAAC,AAAE,AAAC,AAAC,AAC5D;qBADQ,AAAe;AACtB,AACH;AAAC,AACH;;AAAC;AAEa,AAAc,kBAApB,AAAK,CAAgB,AAA4B;;;;AACvD,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAQ;AAC9B,kBAAM,AAAO,UAAG,AAAQ,SAAC,AAAO;AAChC,kBAAM,AAAO,UAAG,AAAO,QAAC,AAAO;AAC/B,kBAAM,AAAO,UAAG,AAAI,OAAC,AAAO;AAC5B,kBAAM,AAAiB,oBAAG,AAAQ,SAAC,AAAyB,0BAAC,AAAO,SAAE,AAAK,OAAE,AAAI,MAAE,AAAiB,AAAG,qBAAC,AAAI,OAAC,AAAc,iBAAG,AAAM,SAAG,AAAE,AAAC,MAAG,AAAyB,AAAC;AACvK,kBAAM,AAAQ,WAAG,OAAM,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAa,eAAE,AAAmB,AAAC,0BAAI,MAAM,AAAQ,SAAC,AAAW,AAAE;AACvH,kBAAM,AAAQ,WAAG,AAAO,QAAC,AAAQ,aAAK,AAAK;AAE3C,kBAAM,AAAa,gBAAG,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAM,QAAE,AAAiB,AAAC;AAC/D,kBAAM,AAAI,OAAG,AAAO,QAAC,AAAI,SAAI,MAAM,AAAe,kDAAC,AAAS,AAAC,AAAK,AAAC,sCAAC,EAAC,AAAS,WAAE,AAAwB,0BAAE,AAAI,MAAE,AAAO,QAAC,AAAE,AAAC,AAAC;AAC5H,kBAAM,AAAO;AACX,AAAM,wBAAE,AAAO,QAAC,AAAE;AAClB,AAAQ,0BAAE,AAAI;AACd,AAAY,8BAAE,AAAO,QAAC,AAAW;AACjC,AAAgB,kCAAE,AAAO,QAAC,AAAe;AACzC,AAAY,8BAAE,CAAC,CAAC,AAAQ,YAAI,AAAO,QAAC,AAAU,eAAK,AAAI,AAAC,SAAI,AAAoB,qBAAC,AAAI,KAAC,AAAO,QAAC,AAAe,AAAC,mBAAG,AAAO,QAAC,AAAe,kBAAG,AAAO,QAAC,AAAI;AACvJ,AAAe,iCAAE,AAAO,QAAC,AAAW;AACpC,AAAO,yBAAE,AAAO;AAEhB,AAAY,8BAAE,AAAO,QAAC,AAAW;AAEjC,AAAW,6BAAE,AAAQ,SAAC,AAAU;AAChC,AAAmB,qCAAE,AAAQ,SAAC,AAAiB,AAChD;AAboB;AAerB,AAAwF;AACxF,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAY,gBAAI,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAC;AACpD,AAAO,wBAAC,AAAoB,uBAAG,AAAO,QAAC,AAAe,AACxD;AAAC;AAED,AAAE,AAAC,gBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAO,wBAAC,AAAQ,WAAG,AAAQ;AAC3B,AAAO,wBAAC,AAAU,aAAG,AAAQ,AAC/B;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAK,MAAC,AAAI,SAAK,AAAC,KAAI,AAA4B,AAAC,8BAAC,AAAC;AAC1D,AAAO,wBAAC,AAAa,gBAAG,AAAI,OAAC,AAAK,MAAC,AAAG,IAAC,AAAI,OAAC,AAAK,MAAC,AAAI,AAAE,OAAC,AAAI,AAAE,OAAC,AAAK,AAAC,AACxE;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,wEAAsB,AAAG,IAAC,AAAI,OAAC,AAAK,MAAC,AAAI,AAAE;AAArC,AAAe,sFAAwB,AAAK,WAAC,AAAI;AACrD,8BAAM,AAAI,OAAG,MAAM,AAAO,AAAC,wEAAqC,AAAI,2DAAC,AAAI,AAAC,KAAE,IAAE,AAAI,OAAC,AAAe,gBAAC,AAAI,OAAC,AAAK,MAAC,AAAG,IAAC,AAAI,AAAE,OAAE,AAAI,AAAC,AAAC;AAChI,AAAO,gCAAC,AAAI,SAAK,AAAI,2DAAC,AAAG,MAAG,AAAQ,WAAG,AAAQ,AAAC,YAAG,AAAI;AACvD,AAAO,gCAAC,CAAC,AAAI,SAAK,AAAI,2DAAC,AAAG,MAAG,AAAQ,WAAG,AAAQ,AAAC,YAAG,AAAO,AAAC,WAAG,AAAI,MAAC,AAAQ,SAAC,AAAI,AAAC;AAElF,AAAE,AAAC,4BAAC,AAAI,OAAC,AAAc,AAAC,gBAAC,AAAC;AACxB,AAAQ,qCAAC,AAAuB,wBAAC,AAAI,AAAE,AAAI,AAAC,AAC9C;AAAC,AACD,AAAI,+BAAC,AAAC;AACJ,AAAa,0CAAC,AAAI,KAAC,AAAI,AAAC,AAC1B;AAAC,AACH;AAAC,AAAC,AACJ;;;;;;AAAC;AAED,kBAAM,AAAI,OAAC,AAAgB,iBAAC,AAAQ,UAAE,AAAO,AAAC;AAE9C,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAc,AAAC,gBAAC,AAAC;AACxB,oBAAI,AAAa,gBAAoB,AAAQ,QAAC,AAAa;AAC3D,AAAE,AAAC,oBAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,0BAAM,AAAc,iBAAG,MAAM,AAA8B,gFAAC,AAAQ,WAAE,MAAM,AAAiB,mEAAC,AAAQ,UAAE,AAAI,OAAC,AAAO,SAAE,AAAK,AAAC,AAAC;AAC7H,AAAE,AAAC,wBAAC,AAAc,kBAAI,AAAI,QAAI,AAAc,eAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AAC1D,8BAAM,IAAI,AAAK,MAAC,AAAyC,AAAC,AAC5D;AAAC;AAED,AAAa,wGAAsB,AAAc,eAAC,AAAC,AAAC,IAAE,AAAI,MAAE,AAAQ,SAAC,AAAO,QAAC,AAAO;AAClF,AAAE,4BAAE,AAAQ,+DAAC,AAAO,QAAC,AAAqB;AAC1C,AAAI,8BAAE,AAAE,AACT,AAAC;AAHoF,qBAAtE,AAAkB;AAKlC,AAAO,4BAAC,AAA4B,+BAAG,AAAI,AAC7C;AAAC;AAED,AAAO,wBAAC,AAAe,kBAAG,AAAa,AACzC;AAAC;AAED,kBAAM,AAAQ;AACZ,AAAO,AAAE,6BAAI,AAAa,aAAG;AAC7B,AAAgB,kCAAE,AAAO,QAAC,AAAyB;AACnD,AAAe,iCAAE,AAAI,OAAC,AAAiB,AAAE;AACzC,AAAO,yBAAE,AAAI,OAAC,AAAgB,AAC/B;AALqB;AAOtB,AAAE,AAAC,gBAAC,AAAQ,SAAC,AAAM,OAAC,AAAW,gBAAK,AAAO,AAAC,SAAC,AAAC;AAC5C,AAAQ,yBAAC,AAAW,cAAG,AAAK,AAC9B;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAQ,yBAAC,AAAa,gBAAG,AAAM;AAC/B,AAAE,AAAC,oBAAC,CAAC,AAAI,OAAC,AAAc,AAAC,gBAAC,AAAC;AACzB,AAAO,4BAAC,AAAQ,WAAG,AAAM,AAC3B;AAAC,AACH;AAAC;AAED,AAAK,6EAAC,AAAO,AAAC;AACd,AAAK,6EAAC,AAAQ,AAAC;AAEf,AAAE,AAAC,gBAAC,AAAQ,SAAC,AAAe,gBAAC,AAAuB,2BAAI,AAAI,SAAI,MAAM,AAAQ,SAAC,AAAe,gBAAC,AAAuB,wBAAC,CAAC,AAAO,SAAE,AAAQ,AAAC,AAAC,AAAC,aAAC,AAAC;AAC5I,AAAM,AACR;AAAC;AAED,kBAAM,AAAI,OAAC,AAAe,gBAAC,AAAO,SAAE,AAAQ,UAAE,AAAI,OAAE,MAAM,AAAI,OAAC,AAAa,cAAC,AAAO,SAAE,AAAQ,UAAE,AAAa,AAAC,AAAC;AAC/G,kBAAM,AAAQ,SAAC,AAAI,KAAC,AAAa,AAAC;AAElC,AAAQ,qBAAC,AAAuB,wBAAC,AAAa,AAAE,AAAI,AAAE,0BAAG,AAAQ,SAAC,AAAO,QAAC,AAAI,QAAI,AAAI,OAAC,AAAc,iBAAG,AAAM,SAAG,AAAE,WAAS,AAAO,OAAM,AAAC,AAC5I;;AAAC;AAED,QAAY,AAAgB;AAC1B,AAAM,eAAC,AAAI,KAAC,AAAO,QAAC,AAAO,WAAI,AAAI,OAAG,AAAI,OAAG,AAAI,KAAC,AAAO,QAAC,AAAO,AACnE;AAAC;AAED,QAAY,AAAc;AACxB,AAAM,eAAC,AAAI,KAAC,AAAI,SAAK,AAAU,AACjC;AAAC;AAEa,AAAa,iBAAnB,AAAK,CAAe,AAAY,SAAE,AAAa,UAAE,AAAqB;;;;AAC5E,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAQ;AAC9B,kBAAM,AAAgB,mBAAG,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAI,OAAC,AAAO,QAAC,AAAM,QAAE,AAAe,AAAC;AACzF,kBAAM,AAAM,SAAG,MAAM,AAAQ,8CAAC,AAAgB,oBAAI,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAgB,kBAAE,AAAe,AAAC,kBAAE,AAAM,AAAC;AAE5G,AAAE,AAAC,gBAAC,AAAgB,oBAAI,AAAI,AAAC,MAAC,AAAC;AAC7B,AAAG,+CAAC,AAA4E,AAAC;AACjF,AAAM,uBAAC,AAAM,AACf;AAAC;AAED,kBAAM,AAAe,kBAAG,MACxB,AAAQ,SAAC,AAAW,YAAC,AAAiB,AAAC;AACvC,kBAAM,AAAK,QAAG,AAAO,QAAC,AAAQ,aAAK,AAAO;AAC1C,AAAO,oBAAC,AAAiB,oBAAG,AAAI;AAChC,AAAO,oBAAC,AAAoB,uBAAG,AAAK,QAAG,AAAe,kBAAG,AAAI,MAAC,AAAK,MAAC,AAAI,KAAC,AAAI,MAAE,AAAe,AAAC;AAC/F,kBAAM,AAAI,OAAC,AAAe,gBAAC,AAAO,SAAE,AAAQ,UAAE,AAAK,OAAE,AAAM,AAAC;AAC5D,kBAAM,AAAI,gEAAC,AAAK,QAAG,AAAa,gBAAG,AAAM,QAAE,AAAK,QAAG,AAAE,KAAG,CAAC,AAAa,AAAC,AAAC;AACxE,kBAAM,AAAQ,SAAC,AAAI,KAAC,AAAe,iBAAE,AAA4B,AAAC;AAElE,mBAAO,AAAO,QAAC,AAAiB;AAChC,AAAmC;AACnC,AAAO,oBAAC,AAAoB,uBAAG,AAAe;AAC9C,AAAM,mBAAC,AAAM,AACf;;AAAC;AAEO,AAAiB;AACvB,AAA4D;AAC5D,AAAyB;AACzB,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAO,QAAC,AAAQ,YAAI,AAAM;AAChD,cAAM,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAO;AACrC,cAAM,AAAU,aAAG,AACjB,UAAS,AAAQ,yBAAiB,AAAO,QAAC,AAAW,WAAG,AACxD,cAAS,AAAQ,4BAAoB,AAAO,QAAC,AAAO,OAAG,AACvD,cAAS,AAAQ,yBAAiB,AAAO,QAAC,AAAW,WAAG,AACxD,cAAS,AAAQ,4BAAoB,AAAO,QAAC,AAAS,SAAG,AACzD,cAAS,AAAQ,6BAAqB,AAAO,QAAC,AAAW,WAAG,AAC5D,cAAS,AAAQ,yBAAiB,AAAO,QAAC,AAAY,YAAG,AAC1D;AACD,AAAG,uEAAC,AAAI,KAAC,AAAQ,SAAC,AAA4B,6BAAC,AAAe,iBAAE,AAAE,MAAI,AAAU,WAAC,AAAI,AAAC,cAAS,AAAQ,6BAAqB,AAAE,EAAG,AAAC,AAAC;AACnI,AAAM,eAAC,AAAU,AACnB;AAAC;AAEa,AAAgB,oBAAtB,AAAK,CAAkB,AAAiB,UAAE,AAAY;;;;AAC5D,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAQ;AAC9B,kBAAM,AAAO,UAAG,AAAI,OAAC,AAAO;AAE5B,AAAE,AAAC,gBAAC,AAAQ,AAAC,UAAC,AAAC;AACb,AAAO,wBAAC,AAAS,YAAG,AAAI;AAExB,AAAE,AAAC,oBAAC,AAAO,QAAC,AAAc,mBAAK,AAAK,AAAC,OAAC,AAAC;AACrC,AAAO,4BAAC,AAAgB,mBAAG,AAAI,AACjC;AAAC;AAED,sBAAM,AAAmB,sBAAG,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAmB,qBAAE,AAAyB,AAAC;AAC9G,AAAE,AAAC,oBAAC,AAAmB,uBAAI,AAAI,AAAC,MAAC,AAAC;AAChC,AAAO,4BAAC,AAAU,aAAG,AAAmB,AAC1C;AAAC,AACH;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAe,kBAAG,MACxB,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAe,iBAAE,AAAqB,AAAC;AACpE,AAAE,AAAC,oBAAC,AAAe,mBAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAO,4BAAC,AAAe,kBAAG,AAAI;AAC9B,AAAO,4BAAC,AAAqB,wBAAG,AAAI;AACpC,AAAO,4BAAC,AAAsB,yBAAG,AAAe,AAClD;AAAC;AAED,sBAAM,AAAM,SAAG,CAAC,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAgB,kBAAE,AAAsB,AAAC,AAAC,4BAAI,AAAwD;AACzJ,AAAO,wBAAC,AAA4B,+BAAG,AAAM;AAC7C,AAAO,wBAAC,AAA8B,iCAAG,CAAC,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAkB,oBAAE,AAAwB,AAAC,AAAC,8BAAI,AAAM;AAErI,AAAE,AAAC,oBAAC,AAAO,QAAC,AAAc,mBAAK,AAAK,AAAC,OAAC,AAAC;AACrC,AAAO,4BAAC,AAAqC,wCAAG,AAAI,AACtD;AAAC,AACH;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAU,eAAK,AAAI,AAAC,MAAC,AAAC;AAChC,AAAO,wBAAC,AAA0B,6BAAG,AAAI,AAC3C;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAQ,YAAI,AAAO,QAAC,AAAU,eAAK,AAAI,AAAC,MAAC,AAAC;AAC7C,AAAO,wBAAC,AAAmC,sCAAG,AAAI,AACpD;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAkC,AAAC,oCAAC,AAAC;AAC/C,AAAE,AAAC,oBAAC,AAAQ,AAAC,UAAC,AAAC;AACb,0BAAM,IAAI,AAAK,MAAC,AAAyG,AAAC,AAC5H;AAAC;AACD,AAAO,wBAAC,AAAkC,qCAAG,AAAI,AACnD;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAI,OAAC,AAAc,kBAAI,AAAO,QAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC1D,AAAE,AAAC,oBAAC,AAAO,QAAC,AAAM,AAAC,QAAC,AAAC;AACnB,AAAO,4BAAC,AAAe,kBAAG,AAAI,AAChC;AAAC;AAED,AAAO,wBAAC,AAAkB,qBAAG,AAAO,QAAC,AAAM,SAAG,AAAK,QAAG,AAAI,AAC5D;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACjC,sBAAM,AAAI,OAAG,AAAgB,6DAAC,AAAO,QAAC,AAAY,iBAAK,AAAI,OAAG,AAAQ,SAAC,AAAO,QAAC,AAAW,cAAW,AAAO,QAAC,AAAY,AAAC;AAC1H,AAAE,AAAC,oBAAC,CAAC,AAAe,2EAAC,AAAI,AAAC,AAAC,OAAC,AAAC;AAC3B,AAAO,4BAAC,AAAa,gBAAG,AAAI,AAC9B;AAAC,AACH;AAAC;AAED,AAAG,4EAAC,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAO,QAAC,AAAO,SAAE,AAAa,eAAE,AAAa,AAAC;AAAE,AAAE,uBAAI,AAAO,QAAC,AAAY,eAAG,AAAE,AAAC;;AAE/G,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAsB,0BAAI,AAAI,OAAG,AAAI,OAAC,AAAgB,mBAAG,AAAO,QAAC,AAAsB,AAAC,wBAAC,AAAC;AACpG,AAAO,wBAAC,AAAwB,2BAAG,AAAI,AACzC;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAwB,AAAC,0BAAC,AAAC;AACrC,AAAO,wBAAC,AAA4B,+BAAG,AAAI,AAC7C;AAAC,AACH;;AAAC;AAEa,AAAe,mBAArB,AAAK,CAAiB,AAAY,SAAE,AAAa,UAAE,AAAoB,aAAE,AAAsB;;;;AACrG,kBAAM,AAAI,OAAmB,AAAI,OAAC,AAAO,QAAC,AAAgB,qBAAK,AAAK,AAAC,KAAzC,GAA4C,AAAE,KAAG,CAAC,AAAK,AAAC;AACpF,AAAG,AAAC,iBAAC,MAAM,AAAI,QAAI,AAAM,OAAC,AAAI,KAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AACxC,sBAAM,AAAK,QAAG,AAAO,QAAC,AAAI,AAAC;AAC3B,AAAE,AAAC,oBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAI,yBAAC,AAAI,AAAC,UAAK,AAAI,IAAE,AAAC,AACxB;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAI,yBAAC,AAAI,AAAC,UAAK,AAAI,QAAI,AAAK,KAAE,AAAC,AACjC;AAAC,AACH;AAAC;AAED,AAAG,AAAC,iBAAC,MAAM,AAAI,QAAI,AAAM,OAAC,AAAI,KAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACzC,sBAAM,AAAK,QAAG,AAAQ,SAAC,AAAI,AAAC;AAC5B,AAAE,AAAC,oBAAC,AAAK,MAAC,AAAO,QAAC,AAAK,AAAC,AAAC,QAAC,AAAC;AACzB,AAAG,AAAC,yBAAC,MAAM,AAAC,KAAI,AAAK,AAAC,OAAC,AAAC;AACtB,AAAI,6BAAC,AAAI,AAAC,UAAK,AAAI,QAAI,AAAC,CAAE,AAAC,AAC7B;AAAC,AACH;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAI,yBAAC,AAAI,AAAC,UAAK,AAAI,QAAI,AAAK,KAAE,AAAC,AACjC;AAAC,AACH;AAAC;AAED,AAAI,iBAAC,AAAI,KAAC,AAAG,AAAC;AAEd,kBAAM,AAAM,SAAG,AAAO,QAAC,AAAQ,aAAK,AAAQ,WAAG,AAAK,AAAG,QAAC,AAAO,QAAC,AAAQ,aAAK,AAAO,UAAG,AAAK,QAAG,AAAO,AAAC;AACvG,kBAAM,AAAQ,WAAG,MAAM,AAAe;AAEtC,gBAAI,AAAY,AAAG,kCAAmB,AAAI,MAAC,AAAK,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAE,AAAW,aAAE,AAAM,QAAE,AAAS,AAAC,UAAK;AACjH,kBAAM,AAAU,aAAG,AAAI,OAAC,AAAgB,mBAAG,AAAa,gBAAG,AAAU;AACrE,AAAY,AAAI,8CAAkB,AAAU,eAAK,AAAI,MAAC,AAAI,MAAC,MAAM,AAAuB,0BAAE,AAAS,WAAE,AAAU,AAAC,WAAK;AAErH,gBAAI,AAAM,SAAG,AAAc;AAC3B,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAQ;AAC9B,kBAAM,AAAa,gBAAG,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAI,OAAC,AAAO,QAAC,AAAO,SAAE,AAAe,AAAC;AACvF,AAAE,AAAC,gBAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,AAAY,AAAI,mDAAmB,AAAQ,SAAC,AAAiB,iBAAK;AAClE,AAAY,AAAI,kDAAkB,AAAU,eAAK,AAAI,MAAC,AAAI,KAAC,AAAQ,SAAC,AAAiB,mBAAE,AAAU,AAAC,WAAK;AACvG,AAAM,AAAG,wCAAe,AAAa,qBAAQ,AAAM,MAAE,AACvD;AAAC;AAED,kBAAM,AAAgB,mBAAG,AAAQ,SAAC,AAAgB;AAClD,AAAE,AAAC,gBAAC,AAAgB,iBAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AAClC,AAAE,AAAC,oBAAC,AAAI,OAAC,AAAO,QAAC,AAAU,eAAK,AAAI,AAAC,MAAC,AAAC;AACrC,AAAmE;AACnE,0BAAM,IAAI,AAAK,AAAC,MAAoG,AAAC,AACvH;AAAC;AAED,AAAM,yBAAG,AAAgC,mCAAG,AAAM;AAClD,AAAE,AAAC,oBAAC,AAAW,AAAC,aAAC,AAAC;AAChB,wBAAI,AAA8B,iCAAG,AAAE;AACvC,AAAG,AAAC,yBAAC,MAAM,AAAI,QAAI,AAAgB,AAAC,kBAAC,AAAC;AACpC,8BAAM,AAAU,aAAG,AAAO,mEAAC,AAAI,KAAC,AAAG,AAAC,KAAC,AAAG,AAAC,AAAY,AAAC;AACtD,AAAG,AAAC,6BAAC,MAAM,AAAG,OAAI,AAAU,AAAC,YAAC,AAAC;AAC7B,kCAAM,AAAU,aAAG,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAuB,6DAAC,AAAI,KAAC,AAAI,MAAE,AAAK,AAAC,AAAE,WAAG,AAAU,WAAC,AAAC,AAAC,EAAM,AAAC;AAChH,gCAAI,AAAiB,oBAAG,AAAW;AACnC,AAAE,AAAC,gCAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACvB,AAAiB,AAAG,4EAAwB,AAAI,MAAC,AAAQ,SAAC,AAAU,AAAC,WAAE;AACvE,AAAsC;AACtC,AAA8B,AAAI,oFAAkB,AAAiB,uBAAM,AAAU,UAAK,AAC5F;AAAC;AAED,kCAAM,AAAI,AAAG,WAAI,AAAiB,iBAAG;AACrC,kCAAM,AAAW,AAAG,4BAAc,AAAQ,SAAC,AAAO,QAAC,AAAW,WAAG;AACjE,kCAAM,AAAO,UAAG,AAAsB;AACtC,AAA8B,AAAI,+FAAiC,AAAG,SAAM,AAAI,KAAC,AAAI,QAAI,AAAG,SAAM,AAAI,KAAC,AAAW,eAAI,AAAE,OAAK,AAAI,QAAI,AAAW,eAAI,AAAO,OAAI,AACjK;AAAC,AACH;AAAC;AACD,AAAM,AAAG,iEAAoC,AAA8B,4CAAc,AAAM,MAAE,AACnG;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,wBAAI,AAAgC,mCAAG,AAAE;AACzC,AAAG,AAAC,yBAAC,MAAM,AAAI,QAAI,AAAgB,AAAC,kBAAC,AAAC;AACpC,AAAG,AAAC,6BAAC,MAAM,AAAG,OAAI,AAAO,mEAAC,AAAI,KAAC,AAAG,AAAC,AAAC,MAAC,AAAC;AACpC,AAAgC,AAAI,mGAAmC,AAAY,kEAAC,AAAG,AAAC,UAAM,AAAI,KAAC,AAAI,QAAI,AAAG,GAAK,AACrH;AAAC,AACH;AAAC;AACD,AAAM,AAAG,mEAAsC,AAAgC,8CAAc,AAAM,MAAE,AACvG;AAAC,AACH;AAAC;AAED,AAAM,qBAAG,AAAY,eAAG,AAAM;AAE9B,AAAE,AAAC,gBAAC,AAAK,4DAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAO,wBAAC,AAAM,OAAC,AAAK,MAAC,AAAsB,yBAAG,AAAM,SAAG,AAAkC,AAAC,AAC5F;AAAC;AAED,wEAA+B,UAAC,AAAO,SAAE,AAAM;AAC7C,sBAAM,AAAO,UAAG,AAAI,MAAC,AAAI,KAAC,AAAQ,UAAE,AAAM,QAAE,AAAO,QAAC,AAAQ,aAAK,AAAO,UAAG,AAAc,iBAAG,AAAU,AAAC;AACvG,sBAAM,AAAY,kFAAW,AAAO,SAAE,AAAI;AACxC,AAAiK;AACjK,AAAG,yBAAE,AAAM,OAAC,AAAM,OAAC,AAAE,IAAE,AAAO,QAAC,AAAG,KAAE,EAAC,AAAO,SAAE,AAAQ,AAAC,AAAC;AACxD,AAAG,yBAAE,AAAI,OAAC,AAAgB,AAC3B;AAJ2C,iBAAvB,AAAO,EAIzB,AAAI,AAAC;AACR,AAAa,yFAAC,AAAO,SAAE,AAAY,cAAE,AAAO,SAAE,AAAO,SAAE,AAAM,AAAC;AAE9D,AAAY,6BAAC,AAAK,MAAC,AAAG,IAAC,AAAM,AAAC,AAChC;AAAC,AAAC,AACJ,aAXQ,AAAI,AAAe;;AAW1B,AACF",
  "sourcesContent": [
    "import { WinPackager } from \"../winPackager\"\nimport { exec, debug, doSpawn, handleProcess, use, asArray, isEmptyOrSpaces } from \"electron-builder-util\"\nimport * as path from \"path\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { getBinFromBintray } from \"electron-builder-util/out/binDownload\"\nimport { v5 as uuid5 } from \"uuid-1345\"\nimport { normalizeExt } from \"../platformPackager\"\nimport { archive } from \"./archive\"\nimport { subTask, log, warn } from \"electron-builder-util/out/log\"\nimport { unlink, readFile } from \"fs-extra-p\"\nimport { NsisOptions, NsisWebOptions } from \"../options/winOptions\"\nimport { Target, Arch, Platform } from \"electron-builder-core\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { copyFile } from \"electron-builder-util/out/fs\"\nimport { computeDownloadUrl, getPublishConfigs, getPublishConfigsForUpdateInfo } from \"../publish/PublishManager\"\nimport { getSignVendorPath } from \"../windowsCodeSign\"\nimport { getPlatformIconFileName } from \"../metadata\"\n\nconst ELECTRON_BUILDER_NS_UUID = \"50e065bc-3134-11e6-9bab-38c9862bdaf3\"\n\nconst nsisPathPromise = getBinFromBintray(\"nsis\", \"3.0.1.8\", \"d9429cc33d06198b48b939e51f48fc95b3b7ccd5584dd9fe3f3f4eacce9d8275\")\nconst nsisResourcePathPromise = getBinFromBintray(\"nsis-resources\", \"3.0.0\", \"cde0e77b249e29d74250bf006aa355d3e02b32226e1c6431fb48facae41d8a7e\")\n\nconst USE_NSIS_BUILT_IN_COMPRESSOR = false\n\nexport default class NsisTarget extends Target {\n  private readonly options: NsisOptions\n\n  private archs: Map<Arch, string> = new Map()\n\n  private readonly nsisTemplatesDir = path.join(__dirname, \"..\", \"..\", \"templates\", \"nsis\")\n\n  constructor(private packager: WinPackager, readonly outDir: string, targetName: string) {\n    super(targetName)\n\n    let options = this.packager.config.nsis || Object.create(null)\n    if (targetName !== \"nsis\") {\n      options = Object.assign(options, (<any>this.packager.config)[targetName])\n    }\n    this.options = options\n\n    const deps = packager.info.metadata.dependencies\n    if (deps != null && deps[\"electron-squirrel-startup\"] != null) {\n      warn('\"electron-squirrel-startup\" dependency is not required for NSIS')\n    }\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    this.archs.set(arch, appOutDir)\n  }\n\n  private async buildAppPackage(appOutDir: string, arch: Arch) {\n    await BluebirdPromise.all([\n      copyFile(path.join(await nsisPathPromise, \"elevate.exe\"), path.join(appOutDir, \"resources\", \"elevate.exe\"), null, false),\n      copyFile(path.join(await getSignVendorPath(), \"windows-10\", Arch[arch], \"signtool.exe\"), path.join(appOutDir, \"resources\", \"signtool.exe\"), null, false),\n    ])\n\n    const packager = this.packager\n    const format = this.options.useZip ? \"zip\" : \"7z\"\n    const archiveFile = path.join(this.outDir, `${packager.appInfo.name}-${packager.appInfo.version}-${Arch[arch]}.nsis.${format}`)\n    return await archive(packager.config.compression, format, archiveFile, appOutDir, true)\n  }\n\n  async finishBuild(): Promise<any> {\n    log(\"Building NSIS installer\")\n    const filesToDelete: Array<string> = []\n    try {\n      await this.buildInstaller(filesToDelete)\n    }\n    finally {\n      if (filesToDelete.length > 0) {\n        await BluebirdPromise.map(filesToDelete, it => unlink(it))\n      }\n    }\n  }\n\n  private async buildInstaller(filesToDelete: Array<string>): Promise<any> {\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const version = appInfo.version\n    const options = this.options\n    const installerFilename = packager.expandArtifactNamePattern(options, \"exe\", null, \"${productName} \" + (this.isWebInstaller ? \"Web \" : \"\") + \"Setup ${version}.${ext}\")\n    const iconPath = await packager.getResource(options.installerIcon, \"installerIcon.ico\") || await packager.getIconPath()\n    const oneClick = options.oneClick !== false\n\n    const installerPath = path.join(this.outDir, installerFilename)\n    const guid = options.guid || await BluebirdPromise.promisify(uuid5)({namespace: ELECTRON_BUILDER_NS_UUID, name: appInfo.id})\n    const defines: any = {\n      APP_ID: appInfo.id,\n      APP_GUID: guid,\n      PRODUCT_NAME: appInfo.productName,\n      PRODUCT_FILENAME: appInfo.productFilename,\n      APP_FILENAME: (!oneClick || options.perMachine === true) && /^[-_+0-9a-zA-Z ]+$/.test(appInfo.productFilename) ? appInfo.productFilename : appInfo.name,\n      APP_DESCRIPTION: appInfo.description,\n      VERSION: version,\n\n      COMPANY_NAME: appInfo.companyName,\n\n      PROJECT_DIR: packager.projectDir,\n      BUILD_RESOURCES_DIR: packager.buildResourcesDir,\n    }\n\n    // electron uses product file name as app data, define it as well to remove on uninstall\n    if (defines.APP_FILENAME != appInfo.productFilename) {\n      defines.APP_PRODUCT_FILENAME = appInfo.productFilename\n    }\n\n    if (iconPath != null) {\n      defines.MUI_ICON = iconPath\n      defines.MUI_UNICON = iconPath\n    }\n\n    if (this.archs.size === 1 && USE_NSIS_BUILT_IN_COMPRESSOR) {\n      defines.APP_BUILD_DIR = this.archs.get(this.archs.keys().next().value)\n    }\n    else {\n      await BluebirdPromise.map(this.archs.keys(), async arch => {\n        const file = await subTask(`Packaging NSIS installer for arch ${Arch[arch]}`, this.buildAppPackage(this.archs.get(arch)!, arch))\n        defines[arch === Arch.x64 ? \"APP_64\" : \"APP_32\"] = file\n        defines[(arch === Arch.x64 ? \"APP_64\" : \"APP_32\") + \"_NAME\"] = path.basename(file)\n\n        if (this.isWebInstaller) {\n          packager.dispatchArtifactCreated(file, this)\n        }\n        else {\n          filesToDelete.push(file)\n        }\n      })\n    }\n\n    await this.configureDefines(oneClick, defines)\n\n    if (this.isWebInstaller) {\n      let appPackageUrl = (<NsisWebOptions>options).appPackageUrl\n      if (appPackageUrl == null) {\n        const publishConfigs = await getPublishConfigsForUpdateInfo(packager, await getPublishConfigs(packager, this.options, false))\n        if (publishConfigs == null || publishConfigs.length === 0) {\n          throw new Error(\"Cannot compute app package download URL\")\n        }\n\n        appPackageUrl = computeDownloadUrl(publishConfigs[0], null, packager.appInfo.version, {\n          os: Platform.WINDOWS.buildConfigurationKey,\n          arch: \"\"\n        })\n\n        defines.APP_PACKAGE_URL_IS_INCOMLETE = null\n      }\n\n      defines.APP_PACKAGE_URL = appPackageUrl\n    }\n\n    const commands: any = {\n      OutFile: `\"${installerPath}\"`,\n      VIProductVersion: appInfo.versionInWeirdWindowsForm,\n      VIAddVersionKey: this.computeVersionKey(),\n      Unicode: this.isUnicodeEnabled,\n    }\n\n    if (packager.config.compression === \"store\") {\n      commands.SetCompress = \"off\"\n    }\n    else {\n      commands.SetCompressor = \"lzma\"\n      if (!this.isWebInstaller) {\n        defines.COMPRESS = \"auto\"\n      }\n    }\n\n    debug(defines)\n    debug(commands)\n\n    if (packager.packagerOptions.effectiveOptionComputed != null && await packager.packagerOptions.effectiveOptionComputed([defines, commands])) {\n      return\n    }\n\n    await this.executeMakensis(defines, commands, true, await this.computeScript(defines, commands, installerPath))\n    await packager.sign(installerPath)\n\n    packager.dispatchArtifactCreated(installerPath, this, `${packager.appInfo.name}-${this.isWebInstaller ? \"Web-\" : \"\"}Setup-${version}.exe`)\n  }\n\n  private get isUnicodeEnabled() {\n    return this.options.unicode == null ? true : this.options.unicode\n  }\n\n  private get isWebInstaller(): boolean {\n    return this.name === \"nsis-web\"\n  }\n\n  private async computeScript(defines: any, commands: any, installerPath: string) {\n    const packager = this.packager\n    const customScriptPath = await packager.getResource(this.options.script, \"installer.nsi\")\n    const script = await readFile(customScriptPath || path.join(this.nsisTemplatesDir, \"installer.nsi\"), \"utf8\")\n\n    if (customScriptPath != null) {\n      log(\"Custom NSIS script is used - uninstaller is not signed by electron-builder\")\n      return script\n    }\n\n    const uninstallerPath = await\n    packager.getTempFile(\"uninstaller.exe\")\n    const isWin = process.platform === \"win32\"\n    defines.BUILD_UNINSTALLER = null\n    defines.UNINSTALLER_OUT_FILE = isWin ? uninstallerPath : path.win32.join(\"Z:\", uninstallerPath)\n    await this.executeMakensis(defines, commands, false, script)\n    await exec(isWin ? installerPath : \"wine\", isWin ? [] : [installerPath])\n    await packager.sign(uninstallerPath, \"  Signing NSIS uninstaller\")\n\n    delete defines.BUILD_UNINSTALLER\n    // platform-specific path, not wine\n    defines.UNINSTALLER_OUT_FILE = uninstallerPath\n    return script\n  }\n\n  private computeVersionKey() {\n    // Error: invalid VIProductVersion format, should be X.X.X.X\n    // so, we must strip beta\n    const localeId = this.options.language || \"1033\"\n    const appInfo = this.packager.appInfo\n    const versionKey = [\n      `/LANG=${localeId} ProductName \"${appInfo.productName}\"`,\n      `/LANG=${localeId} ProductVersion \"${appInfo.version}\"`,\n      `/LANG=${localeId} CompanyName \"${appInfo.companyName}\"`,\n      `/LANG=${localeId} LegalCopyright \"${appInfo.copyright}\"`,\n      `/LANG=${localeId} FileDescription \"${appInfo.description}\"`,\n      `/LANG=${localeId} FileVersion \"${appInfo.buildVersion}\"`,\n    ]\n    use(this.packager.platformSpecificBuildOptions.legalTrademarks, it => versionKey.push(`/LANG=${localeId} LegalTrademarks \"${it}\"`))\n    return versionKey\n  }\n\n  private async configureDefines(oneClick: boolean, defines: any) {\n    const packager = this.packager\n    const options = this.options\n\n    if (oneClick) {\n      defines.ONE_CLICK = null\n\n      if (options.runAfterFinish !== false) {\n        defines.RUN_AFTER_FINISH = null\n      }\n\n      const installerHeaderIcon = await packager.getResource(options.installerHeaderIcon, \"installerHeaderIcon.ico\")\n      if (installerHeaderIcon != null) {\n        defines.HEADER_ICO = installerHeaderIcon\n      }\n    }\n    else {\n      const installerHeader = await\n      packager.getResource(options.installerHeader, \"installerHeader.bmp\")\n      if (installerHeader != null) {\n        defines.MUI_HEADERIMAGE = null\n        defines.MUI_HEADERIMAGE_RIGHT = null\n        defines.MUI_HEADERIMAGE_BITMAP = installerHeader\n      }\n\n      const bitmap = (await packager.getResource(options.installerSidebar, \"installerSidebar.bmp\")) || \"${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp\"\n      defines.MUI_WELCOMEFINISHPAGE_BITMAP = bitmap\n      defines.MUI_UNWELCOMEFINISHPAGE_BITMAP = (await packager.getResource(options.uninstallerSidebar, \"uninstallerSidebar.bmp\")) || bitmap\n\n      if (options.allowElevation !== false) {\n        defines.MULTIUSER_INSTALLMODE_ALLOW_ELEVATION = null\n      }\n    }\n\n    if (options.perMachine === true) {\n      defines.INSTALL_MODE_PER_ALL_USERS = null\n    }\n\n    if (!oneClick || options.perMachine === true) {\n      defines.INSTALL_MODE_PER_ALL_USERS_REQUIRED = null\n    }\n\n    if (options.allowToChangeInstallationDirectory) {\n      if (oneClick) {\n        throw new Error(\"allowToChangeInstallationDirectory makes sense only for boring installer (please set oneClick to false)\")\n      }\n      defines.allowToChangeInstallationDirectory = null\n    }\n\n    if (!this.isWebInstaller && defines.APP_BUILD_DIR == null) {\n      if (options.useZip) {\n        defines.ZIP_COMPRESSION = null\n      }\n\n      defines.COMPRESSION_METHOD = options.useZip ? \"zip\" : \"7z\"\n    }\n\n    if (options.menuCategory != null) {\n      const menu = sanitizeFileName(options.menuCategory === true ? packager.appInfo.companyName : <string>options.menuCategory)\n      if (!isEmptyOrSpaces(menu)) {\n        defines.MENU_FILENAME = menu\n      }\n    }\n\n    use(await packager.getResource(options.license, \"license.rtf\", \"license.txt\"), it => defines.LICENSE_FILE = it)\n\n    if (options.multiLanguageInstaller == null ? this.isUnicodeEnabled : options.multiLanguageInstaller) {\n      defines.MULTI_LANGUAGE_INSTALLER = null\n    }\n\n    if (options.deleteAppDataOnUninstall) {\n      defines.DELETE_APP_DATA_ON_UNINSTALL = null\n    }\n  }\n\n  private async executeMakensis(defines: any, commands: any, isInstaller: boolean, originalScript: string) {\n    const args: Array<string> = (this.options.warningsAsErrors === false) ? [] : [\"-WX\"]\n    for (const name of Object.keys(defines)) {\n      const value = defines[name]\n      if (value == null) {\n        args.push(`-D${name}`)\n      }\n      else {\n        args.push(`-D${name}=${value}`)\n      }\n    }\n\n    for (const name of Object.keys(commands)) {\n      const value = commands[name]\n      if (Array.isArray(value)) {\n        for (const c of value) {\n          args.push(`-X${name} ${c}`)\n        }\n      }\n      else {\n        args.push(`-X${name} ${value}`)\n      }\n    }\n\n    args.push(\"-\")\n\n    const binDir = process.platform === \"darwin\" ? \"mac\" : (process.platform === \"win32\" ? \"Bin\" : \"linux\")\n    const nsisPath = await nsisPathPromise\n\n    let scriptHeader = `!addincludedir \"${path.win32.join(__dirname, \"..\", \"..\", \"templates\", \"nsis\", \"include\")}\"\\n`\n    const pluginArch = this.isUnicodeEnabled ? \"x86-unicode\" : \"x86-ansi\"\n    scriptHeader += `!addplugindir /${pluginArch} \"${path.join(await nsisResourcePathPromise, \"plugins\", pluginArch)}\"\\n`\n\n    let script = originalScript\n    const packager = this.packager\n    const customInclude = await packager.getResource(this.options.include, \"installer.nsh\")\n    if (customInclude != null) {\n      scriptHeader += `!addincludedir \"${packager.buildResourcesDir}\"\\n`\n      scriptHeader += `!addplugindir /${pluginArch} \"${path.join(packager.buildResourcesDir, pluginArch)}\"\\n`\n      script = `\\n!include \"${customInclude}\"\\n\\n${script}`\n    }\n\n    const fileAssociations = packager.fileAssociations\n    if (fileAssociations.length !== 0) {\n      if (this.options.perMachine !== true) {\n        // https://github.com/electron-userland/electron-builder/issues/772\n        throw new Error(`Please set perMachine to true — file associations works on Windows only if installed for all users`)\n      }\n\n      script = \"!include FileAssociation.nsh\\n\" + script\n      if (isInstaller) {\n        let registerFileAssociationsScript = \"\"\n        for (const item of fileAssociations) {\n          const extensions = asArray(item.ext).map(normalizeExt)\n          for (const ext of extensions) {\n            const customIcon = await packager.getResource(getPlatformIconFileName(item.icon, false), `${extensions[0]}.ico`)\n            let installedIconPath = \"$appExe,0\"\n            if (customIcon != null) {\n              installedIconPath = `$INSTDIR\\\\resources\\\\${path.basename(customIcon)}`\n              //noinspection SpellCheckingInspection\n              registerFileAssociationsScript += `  File \"/oname=${installedIconPath}\" \"${customIcon}\"\\n`\n            }\n\n            const icon = `\"${installedIconPath}\"`\n            const commandText = `\"Open with ${packager.appInfo.productName}\"`\n            const command = '\"$appExe $\\\\\"%1$\\\\\"\"'\n            registerFileAssociationsScript += `  !insertmacro APP_ASSOCIATE \"${ext}\" \"${item.name || ext}\" \"${item.description || \"\"}\" ${icon} ${commandText} ${command}\\n`\n          }\n        }\n        script = `!macro registerFileAssociations\\n${registerFileAssociationsScript}!macroend\\n${script}`\n      }\n      else {\n        let unregisterFileAssociationsScript = \"\"\n        for (const item of fileAssociations) {\n          for (const ext of asArray(item.ext)) {\n            unregisterFileAssociationsScript += `  !insertmacro APP_UNASSOCIATE \"${normalizeExt(ext)}\" \"${item.name || ext}\"\\n`\n          }\n        }\n        script = `!macro unregisterFileAssociations\\n${unregisterFileAssociationsScript}!macroend\\n${script}`\n      }\n    }\n\n    script = scriptHeader + script\n\n    if (debug.enabled) {\n      process.stdout.write(\"\\n\\nNSIS script:\\n\\n\" + script + \"\\n\\n---\\nEnd of NSIS script.\\n\\n\")\n    }\n\n    await new BluebirdPromise<any>((resolve, reject) => {\n      const command = path.join(nsisPath, binDir, process.platform === \"win32\" ? \"makensis.exe\" : \"makensis\")\n      const childProcess = doSpawn(command, args, {\n        // we use NSIS_CONFIG_CONST_DATA_PATH=no to build makensis on Linux, but in any case it doesn't use stubs as MacOS/Windows version, so, we explicitly set NSISDIR\n        env: Object.assign({}, process.env, {NSISDIR: nsisPath}),\n        cwd: this.nsisTemplatesDir,\n      }, true)\n      handleProcess(\"close\", childProcess, command, resolve, reject)\n\n      childProcess.stdin.end(script)\n    })\n  }\n}"
  ]
}
