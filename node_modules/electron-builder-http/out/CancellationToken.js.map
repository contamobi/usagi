{
  "version": 3,
  "file": "CancellationToken.js",
  "sourceRoot": "",
  "sources": [
    "../src/CancellationToken.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AAAA,AAAO,AAAE,AAAY,AAAE,AAAM,AAAQ,AAGrC,AAAM;;;;MAAyB,AAAQ,AAAY;AAEjD,QAAI,AAAS;AACX,AAAM,eAAC,AAAI,KAAC,AAAU,AAAI,cAAC,AAAI,KAAC,AAAO,WAAI,AAAI,QAAI,AAAI,KAAC,AAAO,QAAC,AAAS,AAAC,AAC5E;AAAC;AAGD,QAAI,AAAM,OAAC,AAAwB;AACjC,AAAI,aAAC,AAAO,UAAG,AAAK,AACtB;AAAC;AAED,AAAqD;AACrD;AACE,AAAK,AAAE;AAEP,AAAI,aAAC,AAAU,aAAG,AAAK,AACzB;AAAC;AAED,AAAM;AACJ,AAAI,aAAC,AAAU,aAAG,AAAI;AACtB,AAAI,aAAC,AAAI,KAAC,AAAQ,AAAC,AACrB;AAAC;AAED,AAAQ,aAAC,AAAkB;AACzB,AAAI,aAAC,AAAI,KAAC,AAAQ,UAAE,AAAO,AAAC,AAC9B;AAAC;AAED,AAAY,iBAAC,AAA6B;AACxC,cAAM,AAAO,UAAG,MAAM,AAAO,QAAC,AAAM,AAAE;AACtC,AAAI,aAAC,AAAQ,SAAC,AAAO,AAAC;AACtB,AAA2F;AAC3F,AAAM,eAAC,AAAO,QAAC,AAAO,QAAC,MAAM,AAAI,KAAC,AAAc,eAAC,AAAQ,UAAE,AAAO,AAAC,AAAC,AACtE;AAAC,AACF",
  "sourcesContent": [
    "import { EventEmitter } from \"events\"\nimport BluebirdPromise from \"bluebird-lst-c\"\n\nexport class CancellationToken extends EventEmitter {\n  private _cancelled: boolean\n  get cancelled(): boolean {\n    return this._cancelled || (this._parent != null && this._parent.cancelled)\n  }\n\n  private _parent: CancellationToken | null\n  set parent(value: CancellationToken) {\n    this._parent = value\n  }\n\n  // babel cannot compile ... correctly for super calls\n  constructor() {\n    super()\n\n    this._cancelled = false\n  }\n\n  cancel() {\n    this._cancelled = true\n    this.emit(\"cancel\")\n  }\n\n  onCancel(handler: () => any) {\n    this.once(\"cancel\", handler)\n  }\n\n  trackPromise(promise: BluebirdPromise<any>): BluebirdPromise<any> {\n    const handler = () => promise.cancel()\n    this.onCancel(handler)\n    // it is important to return promise, otherwise will be unhandled rejection error on reject\n    return promise.finally(() => this.removeListener(\"cancel\", handler))\n  }\n}"
  ]
}
