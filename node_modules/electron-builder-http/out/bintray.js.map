{
  "version": 3,
  "file": "bintray.js",
  "sourceRoot": "",
  "sources": [
    "../src/bintray.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;AACA,AAAO,AAAE,AAAO,AAAE,AAAuB,AAAE,AAAM,AAAgB,AAGjE,AAAM;;;;wBAA4B,AAAY,MAAE,AAAmB;QAAE,2EAAuC,AAAI;QAAE,AAAoC;QAAE,AAAiC;;AACvL,AAAM,WAAC,AAAO,qDAAI,AAAuB,qEAAC,EAAC,AAAQ,UAAE,AAAiB,mBAAE,AAAI,MAAE,AAAI,AAAC,QAAE,AAAI,MAAE,AAAM,AAAC,SAAE,AAAiB,mBAAE,AAAI,AAAC,AAC9H;AAAC,AAgBD,AAAM;;AASJ,gBAAY,AAAuB,SAAmB,AAAoC,mBAAE,AAAsB;AAA5D,aAAiB,oBAAjB,AAAiB,AAAmB;AACxF,AAAE,AAAC,YAAC,AAAO,QAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,kBAAM,IAAI,AAAK,MAAC,AAAwB,AAAC,AAC3C;AAAC;AACD,AAAE,AAAC,YAAC,AAAO,QAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,kBAAM,IAAI,AAAK,MAAC,AAA0B,AAAC,AAC7C;AAAC;AAED,AAAI,aAAC,AAAI,OAAG,AAAO,QAAC,AAAI,QAAI,AAAS;AACrC,AAAI,aAAC,AAAW,cAAG,AAAO,QAAC,AAAO;AAClC,AAAI,aAAC,AAAK,QAAG,AAAO,QAAC,AAAK;AAC1B,AAAI,aAAC,AAAI,OAAG,AAAO,QAAC,AAAI,QAAI,AAAO,QAAC,AAAK;AACzC,AAAI,aAAC,AAAI,OAAG,AAAM,UAAI,AAAI,OAAG,AAAI,AAAG,gBAAS,IAAI,AAAM,AAAC,UAAG,AAAI,KAAC,AAAI,QAAI,AAAM,MAAE,AAAC,IAAC,AAAQ,SAAC,AAAQ,AAAC,SAAE;AACtG,AAAI,aAAC,AAAQ,AAAG,wBAAa,AAAI,KAAC,AAAK,SAAI,AAAI,KAAC,AAAI,QAAI,AAAI,KAAC,AAAW,WAAE,AAC5E;AAAC;AAED,AAAU,eAAC,AAAe;AACxB,AAAM,eAAC,AAAc,AAAU,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAO,OAAE,IAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,AAAC,AACjH;AAAC;AAED,AAAe,oBAAC,AAAe;AAC7B,AAAM,eAAC,AAAc,AAAc,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAO,OAAQ,UAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,AAAC,AAC3H;AAAC;AAED,AAAa,kBAAC,AAAe;AAC3B,AAAM,iCAA4B,AAAI,KAAC,AAAQ,QAAW,aAAE,AAAI,KAAC,AAAI;AACnE,AAAI,kBAAE,AAAO,AACd;AAFsE,SAAhE,AAAc,AAAU,EAE5B,AAAI,KAAC,AAAiB,AAAC,AAC5B;AAAC;AAED,AAAa,kBAAC,AAAe;AAC3B,AAAM,eAAC,AAAc,AAAC,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAO,OAAE,IAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAiB,mBAAE,AAAQ,AAAC,AAClH;AAAC,AACF",
  "sourcesContent": [
    "import { BintrayOptions } from \"./publishOptions\"\nimport { request, configureRequestOptions } from \"./httpExecutor\"\nimport { CancellationToken } from \"./CancellationToken\"\n\nexport function bintrayRequest<T>(path: string, auth: string | null, data: {[name: string]: any; } | null = null, cancellationToken: CancellationToken, method?: \"GET\" | \"DELETE\" | \"PUT\"): Promise<T> {\n  return request<T>(configureRequestOptions({hostname: \"api.bintray.com\", path: path}, auth, method), cancellationToken, data)\n}\n\nexport interface Version {\n  readonly name: string\n  //noinspection ReservedWordAsName\n  readonly package: string\n}\n\nexport interface File {\n  name: string\n  path: string\n\n  sha1: string\n  sha256: string\n}\n\nexport class BintrayClient {\n  private readonly basePath: string\n  readonly auth: string | null\n  readonly repo: string\n\n  readonly owner: string\n  readonly user: string\n  readonly packageName: string\n\n  constructor(options: BintrayOptions, private readonly cancellationToken: CancellationToken, apiKey?: string | null) {\n    if (options.owner == null) {\n      throw new Error(\"owner is not specified\")\n    }\n    if (options.package == null) {\n      throw new Error(\"package is not specified\")\n    }\n\n    this.repo = options.repo || \"generic\"\n    this.packageName = options.package\n    this.owner = options.owner\n    this.user = options.user || options.owner\n    this.auth = apiKey == null ? null : `Basic ${new Buffer(`${this.user}:${apiKey}`).toString(\"base64\")}`\n    this.basePath = `/packages/${this.owner}/${this.repo}/${this.packageName}`\n  }\n\n  getVersion(version: string): Promise<Version> {\n    return bintrayRequest<Version>(`${this.basePath}/versions/${version}`, this.auth, null, this.cancellationToken)\n  }\n\n  getVersionFiles(version: string): Promise<Array<File>> {\n    return bintrayRequest<Array<File>>(`${this.basePath}/versions/${version}/files`, this.auth, null, this.cancellationToken)\n  }\n\n  createVersion(version: string): Promise<any> {\n    return bintrayRequest<Version>(`${this.basePath}/versions`, this.auth, {\n      name: version,\n    }, this.cancellationToken)\n  }\n\n  deleteVersion(version: string): Promise<any> {\n    return bintrayRequest(`${this.basePath}/versions/${version}`, this.auth, null, this.cancellationToken, \"DELETE\")\n  }\n}"
  ]
}
