{
  "version": 3,
  "file": "core.js",
  "sourceRoot": "",
  "sources": [
    "../src/core.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "export enum Arch {\n  ia32, x64, armv7l\n}\n\nexport function getArchSuffix(arch: Arch): string {\n  return arch === Arch.x64 ? \"\" : `-${Arch[arch]}`\n}\n\nexport function toLinuxArchString(arch: Arch) {\n  return arch === Arch.ia32 ? \"i386\" : (arch === Arch.x64 ? \"amd64\" : \"armv7l\")\n}\n\nexport function archFromString(name: string): Arch {\n  if (name === \"x64\") {\n    return Arch.x64\n  }\n  if (name === \"ia32\") {\n    return Arch.ia32\n  }\n  if (name === \"armv7l\") {\n    return Arch.armv7l\n  }\n\n  throw new Error(`Unsupported arch ${name}`)\n}\n\nexport class Platform {\n  static MAC = new Platform(\"mac\", \"mac\", \"darwin\")\n  static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\n  static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\n\n  // deprecated\n  //noinspection JSUnusedGlobalSymbols\n  static OSX = Platform.MAC\n\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>> {\n    const archToType = new Map()\n    if (this === Platform.MAC) {\n      archs = [Arch.x64]\n    }\n\n    for (const arch of (archs == null || archs.length === 0 ? [archFromString(process.arch)] : archs)) {\n      archToType.set(arch, type == null ? [] : (Array.isArray(type) ? type : [type]))\n    }\n    return new Map([[this, archToType]])\n  }\n\n  static current(): Platform {\n    return Platform.fromString(process.platform)\n  }\n\n  static fromString(name: string): Platform {\n    name = name.toLowerCase()\n    switch (name) {\n      case Platform.MAC.nodeName:\n      case Platform.MAC.name:\n        return Platform.MAC\n\n      case Platform.WINDOWS.nodeName:\n      case Platform.WINDOWS.name:\n      case Platform.WINDOWS.buildConfigurationKey:\n        return Platform.WINDOWS\n\n      case Platform.LINUX.nodeName:\n        return Platform.LINUX\n\n      default:\n        throw new Error(`Unknown platform: ${name}`)\n    }\n  }\n}\n\nexport abstract class Target {\n  abstract readonly outDir: string\n\n  constructor(readonly name: string, readonly isAsyncSupported: boolean = true) {\n  }\n\n  abstract build(appOutDir: string, arch: Arch): Promise<any>\n\n  finishBuild(): Promise<any> {\n    return Promise.resolve()\n  }\n}\n\nexport interface TargetSpecificOptions {\n  /*\n   The [artifact file name pattern](https://github.com/electron-userland/electron-builder/wiki/Options#artifact-file-name-pattern).\n   */\n  readonly artifactName?: string | null\n\n  readonly forceCodeSigning?: boolean\n}"
  ]
}
