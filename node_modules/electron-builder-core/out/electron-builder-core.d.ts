declare module "electron-builder-core" {
  export enum Arch {
    ia32 = 0,
    x64 = 1,
    armv7l = 2,
  }

  export function getArchSuffix(arch: Arch): string

  export function toLinuxArchString(arch: Arch): "i386" | "amd64" | "armv7l"

  export function archFromString(name: string): Arch

  export class Platform {
    name: string
    buildConfigurationKey: string
    nodeName: string
    static MAC: Platform
    static LINUX: Platform
    static WINDOWS: Platform
    static OSX: Platform
    constructor(name: string, buildConfigurationKey: string, nodeName: string)
    toString(): string
    createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>>
    static current(): Platform
    static fromString(name: string): Platform
  }

  export abstract class Target {
    readonly name: string
    readonly isAsyncSupported: boolean
    readonly abstract outDir: string
    constructor(name: string, isAsyncSupported?: boolean)
    abstract build(appOutDir: string, arch: Arch): Promise<any>
    finishBuild(): Promise<any>
  }

  export interface TargetSpecificOptions {
    readonly artifactName?: string | null
    readonly forceCodeSigning?: boolean
  }
}

